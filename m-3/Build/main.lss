
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ad0  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  20000000  08001ad0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000088  20000050  08001b20  00010050  2**2
                  ALLOC
  3 ._usrstack    00000100  200000d8  08001ba8  00010050  2**0
                  ALLOC
  4 .debug_info   00004291  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001619  00000000  00000000  000142e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00002e18  00000000  00000000  000158fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000003d8  00000000  00000000  00018712  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000570  00000000  00000000  00018aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bed  00000000  00000000  0001905a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011f1  00000000  00000000  0001ac47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000070  00000000  00000000  0001be38  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  0001bea8  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00000918  00000000  00000000  0001bedc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 0d 01 00 08 00 00 00 00 00 00 00 00     .P. ............
 8000010:	09 01 00 08 09 01 00 08 09 01 00 08 00 00 00 00     ................
	...
 800002c:	09 01 00 08 09 01 00 08 00 00 00 00 09 01 00 08     ................
 800003c:	51 07 00 08 09 01 00 08 09 01 00 08 09 01 00 08     Q...............
 800004c:	09 01 00 08 09 01 00 08 09 01 00 08 95 06 00 08     ................
 800005c:	bd 06 00 08 e5 06 00 08 e9 06 00 08 ed 06 00 08     ................
 800006c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800007c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800008c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800009c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000ac:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000bc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000cc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000dc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
	...

08000108 <Default_Handler>:
void Default_Handler(void)
{
	/* Go into an infinite loop. */
	while (1)
	{
	}
 8000108:	e7fe      	b.n	8000108 <Default_Handler>
 800010a:	bf00      	nop

0800010c <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 800010c:	4668      	mov	r0, sp
 800010e:	f020 0107 	bic.w	r1, r0, #7
 8000112:	468d      	mov	sp, r1
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000114:	4a10      	ldr	r2, [pc, #64]	; (8000158 <zero_loop+0x16>)
 8000116:	4b11      	ldr	r3, [pc, #68]	; (800015c <zero_loop+0x1a>)
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 8000118:	b501      	push	{r0, lr}
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800011a:	429a      	cmp	r2, r3
 800011c:	d20d      	bcs.n	800013a <Reset_Handler+0x2e>
 800011e:	43d0      	mvns	r0, r2
 8000120:	490f      	ldr	r1, [pc, #60]	; (8000160 <zero_loop+0x1e>)
 8000122:	4418      	add	r0, r3
 8000124:	460b      	mov	r3, r1
 8000126:	f020 0003 	bic.w	r0, r0, #3
 800012a:	3004      	adds	r0, #4
 800012c:	4408      	add	r0, r1
	{
		*(pulDest++) = *(pulSrc++);
 800012e:	f853 1b04 	ldr.w	r1, [r3], #4
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000132:	4283      	cmp	r3, r0
	{
		*(pulDest++) = *(pulSrc++);
 8000134:	f842 1b04 	str.w	r1, [r2], #4
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000138:	d1f9      	bne.n	800012e <Reset_Handler+0x22>
	{
		*(pulDest++) = *(pulSrc++);
	}
		__asm("  ldr     r0, =_sbss\n"
 800013a:	480b      	ldr	r0, [pc, #44]	; (8000168 <zero_loop+0x26>)
 800013c:	490b      	ldr	r1, [pc, #44]	; (800016c <zero_loop+0x2a>)
 800013e:	f04f 0200 	mov.w	r2, #0

08000142 <zero_loop>:
 8000142:	4288      	cmp	r0, r1
 8000144:	bfb8      	it	lt
 8000146:	f840 2b04 	strlt.w	r2, [r0], #4
 800014a:	dbfa      	blt.n	8000142 <zero_loop>
          "    strlt   r2, [r0], #4\n"
          "    blt     zero_loop");
        	
	
  
    main(); //jump main function
 800014c:	4b05      	ldr	r3, [pc, #20]	; (8000164 <zero_loop+0x22>)
 800014e:	4798      	blx	r3

        printf("failed load ..");

    #endif

}
 8000150:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8000154:	4685      	mov	sp, r0
 8000156:	4770      	bx	lr
 8000158:	20000000 	.word	0x20000000
 800015c:	20000050 	.word	0x20000050
 8000160:	08001ad0 	.word	0x08001ad0
 8000164:	08001429 	.word	0x08001429
 8000168:	20000050 	.word	0x20000050
 800016c:	200000d8 	.word	0x200000d8

08000170 <Hw_Init>:


HW_DEF void Hw_Init(void);

HW_DEF void Hw_Init(void)
{
 8000170:	b510      	push	{r4, lr}
    HSE_Init();
 8000172:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <Hw_Init+0x34>)
 8000174:	4798      	blx	r3
    APB2Enable(AFIO_ENABLE, ENABLE);
 8000176:	2001      	movs	r0, #1
 8000178:	4c0b      	ldr	r4, [pc, #44]	; (80001a8 <Hw_Init+0x38>)
 800017a:	4601      	mov	r1, r0
 800017c:	47a0      	blx	r4
    APB2Enable(IOPORT_A_ENABLE, ENABLE);
 800017e:	2004      	movs	r0, #4
 8000180:	2101      	movs	r1, #1
 8000182:	47a0      	blx	r4
    APB2Enable(IOPORT_B_ENABLE, ENABLE);
 8000184:	2008      	movs	r0, #8
 8000186:	2101      	movs	r1, #1
 8000188:	47a0      	blx	r4
    APB2Enable(IOPORT_C_ENABLE, ENABLE);
 800018a:	2010      	movs	r0, #16
 800018c:	2101      	movs	r1, #1
 800018e:	47a0      	blx	r4
    APB2Enable(USART1_ENABLE, ENABLE);
 8000190:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000194:	2101      	movs	r1, #1
 8000196:	47a0      	blx	r4
    GPIO_Configuratioin();
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <Hw_Init+0x3c>)
 800019a:	4798      	blx	r3
    USART1_Init();
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <Hw_Init+0x40>)
 800019e:	4798      	blx	r3
 80001a0:	bd10      	pop	{r4, pc}
 80001a2:	bf00      	nop
 80001a4:	080001b5 	.word	0x080001b5
 80001a8:	08000249 	.word	0x08000249
 80001ac:	080003cd 	.word	0x080003cd
 80001b0:	0800054d 	.word	0x0800054d

080001b4 <HSE_Init>:
    }
}


HW_RCC_DEF void HSE_Init(void)
{
 80001b4:	b410      	push	{r4}
    __IO uint32_t HSEStatus = 0;
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001b6:	4b21      	ldr	r3, [pc, #132]	; (800023c <HSE_Init+0x88>)
}


HW_RCC_DEF void HSE_Init(void)
{
    __IO uint32_t HSEStatus = 0;
 80001b8:	2400      	movs	r4, #0
    }
}


HW_RCC_DEF void HSE_Init(void)
{
 80001ba:	b083      	sub	sp, #12
    __IO uint32_t HSEStatus = 0;
 80001bc:	9401      	str	r4, [sp, #4]
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001be:	681c      	ldr	r4, [r3, #0]
 80001c0:	4a1f      	ldr	r2, [pc, #124]	; (8000240 <HSE_Init+0x8c>)
 80001c2:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001c6:	4619      	mov	r1, r3
        StartUpCounter++;
 80001c8:	4610      	mov	r0, r2


HW_RCC_DEF void HSE_Init(void)
{
    __IO uint32_t HSEStatus = 0;
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001ca:	601c      	str	r4, [r3, #0]
 80001cc:	e003      	b.n	80001d6 <HSE_Init+0x22>
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;
    }while((HSEStatus == 0) && (StartUpCounter == 0x500));
 80001ce:	6803      	ldr	r3, [r0, #0]
 80001d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001d4:	d109      	bne.n	80001ea <HSE_Init+0x36>
{
    __IO uint32_t HSEStatus = 0;
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001d6:	680b      	ldr	r3, [r1, #0]
 80001d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001dc:	9301      	str	r3, [sp, #4]
        StartUpCounter++;
 80001de:	6813      	ldr	r3, [r2, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	6013      	str	r3, [r2, #0]
    }while((HSEStatus == 0) && (StartUpCounter == 0x500));
 80001e4:	9b01      	ldr	r3, [sp, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d0f1      	beq.n	80001ce <HSE_Init+0x1a>
    //flash access delay 48MHz < SYSCLOCK <=72MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_2;
     //PLL setting
    /* HCLK = SYSTICK */
    RCC->CFGR |= (uint32_t)SYSCLK_NOT_DIVIDED;
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <HSE_Init+0x88>)
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;
    }while((HSEStatus == 0) && (StartUpCounter == 0x500));
    //flash access delay 48MHz < SYSCLOCK <=72MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_2;
 80001ec:	4815      	ldr	r0, [pc, #84]	; (8000244 <HSE_Init+0x90>)
    /* PLL configuration : PLLCLK = HSE * 6 = 72MHz */
    RCC->CFGR |= (uint32_t)(PLLSRC_HSE | PLL_INPUT_MULT6);
    /* PLL ON */
    RCC->CR |= RCC_CR_PLLON;
    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80001ee:	4619      	mov	r1, r3
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;
    }while((HSEStatus == 0) && (StartUpCounter == 0x500));
    //flash access delay 48MHz < SYSCLOCK <=72MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_2;
 80001f0:	6802      	ldr	r2, [r0, #0]
 80001f2:	f042 0202 	orr.w	r2, r2, #2
 80001f6:	6002      	str	r2, [r0, #0]
     //PLL setting
    /* HCLK = SYSTICK */
    RCC->CFGR |= (uint32_t)SYSCLK_NOT_DIVIDED;
 80001f8:	685a      	ldr	r2, [r3, #4]
 80001fa:	605a      	str	r2, [r3, #4]
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)APB2_PCLK2_NOT_DIVIDED;
 80001fc:	685a      	ldr	r2, [r3, #4]
 80001fe:	605a      	str	r2, [r3, #4]
    /* PCLK1 = HCLK */
    //RCC->CFGR |= (uint32_t)APB1_PCLK1_DIVIDED2;
    /* ADC = set div 6 */
    RCC->CFGR |= (uint32_t)ADCPRE_PLCK2_DIVIDED6;
 8000200:	685a      	ldr	r2, [r3, #4]
 8000202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000206:	605a      	str	r2, [r3, #4]
    /* PLL configuration : PLLCLK = HSE * 6 = 72MHz */
    RCC->CFGR |= (uint32_t)(PLLSRC_HSE | PLL_INPUT_MULT6);
 8000208:	685a      	ldr	r2, [r3, #4]
 800020a:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 800020e:	605a      	str	r2, [r3, #4]
    /* PLL ON */
    RCC->CR |= RCC_CR_PLLON;
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000216:	601a      	str	r2, [r3, #0]
    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000218:	680b      	ldr	r3, [r1, #0]
 800021a:	4a08      	ldr	r2, [pc, #32]	; (800023c <HSE_Init+0x88>)
 800021c:	019b      	lsls	r3, r3, #6
 800021e:	d5fb      	bpl.n	8000218 <HSE_Init+0x64>
        ;
    }
    /* select PLL as system clock source */
    RCC->CFGR |= (uint32_t)SW_PLL_SYSCLOCK;
    /* Wailt til PLL is used as system clock source */
    while((RCC->CFGR & (uint32_t)RCC_SWS_MASK) != ((uint32_t)0x08))
 8000220:	4611      	mov	r1, r2
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
        ;
    }
    /* select PLL as system clock source */
    RCC->CFGR |= (uint32_t)SW_PLL_SYSCLOCK;
 8000222:	6853      	ldr	r3, [r2, #4]
 8000224:	f043 0302 	orr.w	r3, r3, #2
 8000228:	6053      	str	r3, [r2, #4]
    /* Wailt til PLL is used as system clock source */
    while((RCC->CFGR & (uint32_t)RCC_SWS_MASK) != ((uint32_t)0x08))
 800022a:	684b      	ldr	r3, [r1, #4]
 800022c:	f003 030c 	and.w	r3, r3, #12
 8000230:	2b08      	cmp	r3, #8
 8000232:	d1fa      	bne.n	800022a <HSE_Init+0x76>
    {
        ; //조건을 만족하면 여기 pll 준비가 안되어 있다는 것
    }
}
 8000234:	b003      	add	sp, #12
 8000236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	40021000 	.word	0x40021000
 8000240:	20000050 	.word	0x20000050
 8000244:	40022000 	.word	0x40022000

08000248 <APB2Enable>:
HW_RCC_DEF void APB2Enable(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    if(NewState != DISABLE)
    {
        RCC->APB2ENR |= RCC_APB2Periph;
 8000248:	4a04      	ldr	r2, [pc, #16]	; (800025c <APB2Enable+0x14>)
 800024a:	6993      	ldr	r3, [r2, #24]
        ; //조건을 만족하면 여기 pll 준비가 안되어 있다는 것
    }
}
HW_RCC_DEF void APB2Enable(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    if(NewState != DISABLE)
 800024c:	b919      	cbnz	r1, 8000256 <APB2Enable+0xe>
    {
        RCC->APB2ENR |= RCC_APB2Periph;
    }
    else
    {
        RCC->APB2ENR &= ~RCC_APB2Periph;
 800024e:	ea23 0000 	bic.w	r0, r3, r0
 8000252:	6190      	str	r0, [r2, #24]
 8000254:	4770      	bx	lr
}
HW_RCC_DEF void APB2Enable(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    if(NewState != DISABLE)
    {
        RCC->APB2ENR |= RCC_APB2Periph;
 8000256:	4318      	orrs	r0, r3
 8000258:	6190      	str	r0, [r2, #24]
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000

08000260 <RCC_GetClocksFreq>:
HW_RCC_DEF void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_SWS_MASK;
 8000260:	4a23      	ldr	r2, [pc, #140]	; (80002f0 <RCC_GetClocksFreq+0x90>)
    }
}


HW_RCC_DEF void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000262:	b430      	push	{r4, r5}
    uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_SWS_MASK;
 8000264:	6853      	ldr	r3, [r2, #4]
 8000266:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 800026a:	2b04      	cmp	r3, #4
 800026c:	d038      	beq.n	80002e0 <RCC_GetClocksFreq+0x80>
 800026e:	2b08      	cmp	r3, #8
 8000270:	d025      	beq.n	80002be <RCC_GetClocksFreq+0x5e>
 8000272:	b30b      	cbz	r3, 80002b8 <RCC_GetClocksFreq+0x58>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = RCC_HSI_Value;
 8000274:	4a1f      	ldr	r2, [pc, #124]	; (80002f4 <RCC_GetClocksFreq+0x94>)
      break;
 8000276:	4613      	mov	r3, r2
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = RCC_HSI_Value;
 8000278:	6002      	str	r2, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_HPRE_SET_MASK;
 800027a:	4a1d      	ldr	r2, [pc, #116]	; (80002f0 <RCC_GetClocksFreq+0x90>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800027c:	4c1e      	ldr	r4, [pc, #120]	; (80002f8 <RCC_GetClocksFreq+0x98>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_HPRE_SET_MASK;
 800027e:	6851      	ldr	r1, [r2, #4]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & RCC_ADC_PRE_SET_MASK;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 8000280:	4d1e      	ldr	r5, [pc, #120]	; (80002fc <RCC_GetClocksFreq+0x9c>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_HPRE_SET_MASK;
  tmp = tmp >> 4;
 8000282:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000286:	5c61      	ldrb	r1, [r4, r1]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000288:	40cb      	lsrs	r3, r1
 800028a:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_PPRE1_SET_MASK;
 800028c:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 800028e:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000292:	5c61      	ldrb	r1, [r4, r1]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000294:	fa23 f101 	lsr.w	r1, r3, r1
 8000298:	6081      	str	r1, [r0, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_PPRE2_SET_MASK;
 800029a:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 800029c:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 80002a0:	5c61      	ldrb	r1, [r4, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80002a2:	40cb      	lsrs	r3, r1
 80002a4:	60c3      	str	r3, [r0, #12]
  
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & RCC_ADC_PRE_SET_MASK;
 80002a6:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 80002a8:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 80002ac:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;

 80002ae:	bc30      	pop	{r4, r5}
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & RCC_ADC_PRE_SET_MASK;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80002b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80002b4:	6103      	str	r3, [r0, #16]

 80002b6:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_SWS_MASK;
  switch (tmp)
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = RCC_HSI_Value;
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <RCC_GetClocksFreq+0x94>)
 80002ba:	6003      	str	r3, [r0, #0]
      break;
 80002bc:	e7dd      	b.n	800027a <RCC_GetClocksFreq+0x1a>
      RCC_Clocks->SYSCLK_Frequency = RCC_HSE_Value;
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_PLLMUL_MASK;
 80002be:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_PLLSRC_MASK;
 80002c0:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 80002c2:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 80002c6:	03c9      	lsls	r1, r1, #15

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_PLLMUL_MASK;
      pllsource = RCC->CFGR & RCC_PLLSRC_MASK;
      pllmull = ( pllmull >> 18) + 2;
 80002c8:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 80002cc:	d50b      	bpl.n	80002e6 <RCC_GetClocksFreq+0x86>
        RCC_Clocks->SYSCLK_Frequency = (RCC_HSI_Value >> 1) * pllmull;
        
      }
      else
      {/* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_PLLXTPRE_MASK) != (uint32_t)RESET)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0392      	lsls	r2, r2, #14
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (RCC_HSE_Value >> 1) * pllmull;
 80002d2:	bf4c      	ite	mi
 80002d4:	4a0a      	ldrmi	r2, [pc, #40]	; (8000300 <RCC_GetClocksFreq+0xa0>)
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = RCC_HSE_Value * pllmull;
 80002d6:	4a0b      	ldrpl	r2, [pc, #44]	; (8000304 <RCC_GetClocksFreq+0xa4>)
 80002d8:	fb02 f303 	mul.w	r3, r2, r3
 80002dc:	6003      	str	r3, [r0, #0]
 80002de:	e7cc      	b.n	800027a <RCC_GetClocksFreq+0x1a>
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = RCC_HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = RCC_HSE_Value;
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <RCC_GetClocksFreq+0xa4>)
 80002e2:	6003      	str	r3, [r0, #0]
      break;
 80002e4:	e7c9      	b.n	800027a <RCC_GetClocksFreq+0x1a>
      pllmull = RCC->CFGR & RCC_PLLMUL_MASK;
      pllsource = RCC->CFGR & RCC_PLLSRC_MASK;
      pllmull = ( pllmull >> 18) + 2;
      if (pllsource == 0x00)
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (RCC_HSI_Value >> 1) * pllmull;
 80002e6:	4a08      	ldr	r2, [pc, #32]	; (8000308 <RCC_GetClocksFreq+0xa8>)
 80002e8:	fb02 f303 	mul.w	r3, r2, r3
 80002ec:	6003      	str	r3, [r0, #0]
 80002ee:	e7c4      	b.n	800027a <RCC_GetClocksFreq+0x1a>
 80002f0:	40021000 	.word	0x40021000
 80002f4:	007a1200 	.word	0x007a1200
 80002f8:	20000004 	.word	0x20000004
 80002fc:	20000000 	.word	0x20000000
 8000300:	005b8d80 	.word	0x005b8d80
 8000304:	00b71b00 	.word	0x00b71b00
 8000308:	003d0900 	.word	0x003d0900

0800030c <GPIO_Init>:
HW_GPIO_DEF uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
HW_GPIO_DEF void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);
HW_GPIO_DEF void GPIO_Configuratioin(void);

HW_GPIO_DEF void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800030c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    uint32_t tmpreg = 0x00, pinmask = 0x00;
    /*--------------- GPIO Mode Configuration -----------------*/
    currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & (uint32_t)0x0F;
 8000310:	78cd      	ldrb	r5, [r1, #3]
    if((((uint32_t)GPIO_InitStruct->GPIO_Mode) & (uint32_t)0x10) != 0x00)
 8000312:	06eb      	lsls	r3, r5, #27
    {
        currentmode |= GPIO_InitStruct->GPIO_Speed;
 8000314:	bf48      	it	mi
 8000316:	788b      	ldrbmi	r3, [r1, #2]
    }
    /*--------------- GPIO CRL Configuration -----------------*/
    //max pin_7 = uint16_t 0x0080 pin_8 = uint16)t 0x0100
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000318:	8809      	ldrh	r1, [r1, #0]
HW_GPIO_DEF void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    uint32_t tmpreg = 0x00, pinmask = 0x00;
    /*--------------- GPIO Mode Configuration -----------------*/
    currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & (uint32_t)0x0F;
 800031a:	f005 0e0f 	and.w	lr, r5, #15
    if((((uint32_t)GPIO_InitStruct->GPIO_Mode) & (uint32_t)0x10) != 0x00)
    {
        currentmode |= GPIO_InitStruct->GPIO_Speed;
 800031e:	bf48      	it	mi
 8000320:	ea4e 0e03 	orrmi.w	lr, lr, r3
    }
    /*--------------- GPIO CRL Configuration -----------------*/
    //max pin_7 = uint16_t 0x0080 pin_8 = uint16)t 0x0100
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000324:	f011 0fff 	tst.w	r1, #255	; 0xff
 8000328:	d021      	beq.n	800036e <GPIO_Init+0x62>
    {
        tmpreg = GPIOx->CRL;
 800032a:	6806      	ldr	r6, [r0, #0]
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 800032c:	2300      	movs	r3, #0
        {
            pos = ((uint32_t)0x01) << pinpos;
 800032e:	2701      	movs	r7, #1
            currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
            if(currentpin == pos)
            {
                pos = pinpos << 2;
                /* Clear the corresponding low control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
 8000330:	f04f 080f 	mov.w	r8, #15
 8000334:	e002      	b.n	800033c <GPIO_Init+0x30>
    /*--------------- GPIO CRL Configuration -----------------*/
    //max pin_7 = uint16_t 0x0080 pin_8 = uint16)t 0x0100
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    {
        tmpreg = GPIOx->CRL;
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000336:	3301      	adds	r3, #1
 8000338:	2b08      	cmp	r3, #8
 800033a:	d017      	beq.n	800036c <GPIO_Init+0x60>
        {
            pos = ((uint32_t)0x01) << pinpos;
 800033c:	fa07 f203 	lsl.w	r2, r7, r3
            /* Get the port pins position */
            currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000340:	ea02 0401 	and.w	r4, r2, r1
            if(currentpin == pos)
 8000344:	4294      	cmp	r4, r2
 8000346:	d1f6      	bne.n	8000336 <GPIO_Init+0x2a>
            {
                pos = pinpos << 2;
 8000348:	009a      	lsls	r2, r3, #2
                /* Clear the corresponding low control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
 800034a:	fa08 fc02 	lsl.w	ip, r8, r2
                tmpreg &= ~pinmask;
 800034e:	ea26 060c 	bic.w	r6, r6, ip
                /* Write the mode configuration in the corresponding bits */
                tmpreg |= (currentmode << pos);
 8000352:	fa0e f202 	lsl.w	r2, lr, r2
                /* Reset the corresponding ODR bit */
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000356:	2d28      	cmp	r5, #40	; 0x28
                pos = pinpos << 2;
                /* Clear the corresponding low control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
                tmpreg &= ~pinmask;
                /* Write the mode configuration in the corresponding bits */
                tmpreg |= (currentmode << pos);
 8000358:	ea46 0602 	orr.w	r6, r6, r2
                /* Reset the corresponding ODR bit */
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800035c:	d031      	beq.n	80003c2 <GPIO_Init+0xb6>
                    GPIOx->BRR = (((uint32_t)0x01) >> pinpos);
                }
                else
                {
                    /* Set the corresponding ODR bit */
                    if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800035e:	2d48      	cmp	r5, #72	; 0x48
    /*--------------- GPIO CRL Configuration -----------------*/
    //max pin_7 = uint16_t 0x0080 pin_8 = uint16)t 0x0100
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    {
        tmpreg = GPIOx->CRL;
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000360:	f103 0301 	add.w	r3, r3, #1
                else
                {
                    /* Set the corresponding ODR bit */
                    if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
                    {
                        GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000364:	bf08      	it	eq
 8000366:	6104      	streq	r4, [r0, #16]
    /*--------------- GPIO CRL Configuration -----------------*/
    //max pin_7 = uint16_t 0x0080 pin_8 = uint16)t 0x0100
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    {
        tmpreg = GPIOx->CRL;
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000368:	2b08      	cmp	r3, #8
 800036a:	d1e7      	bne.n	800033c <GPIO_Init+0x30>
                        GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
                    }
                }
            }
        }
        GPIOx->CRL = tmpreg;
 800036c:	6006      	str	r6, [r0, #0]
    }
    /*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  //0x00ff = 1111 1111, pin_8 = 1 0000 0000
  if(GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800036e:	29ff      	cmp	r1, #255	; 0xff
 8000370:	d923      	bls.n	80003ba <GPIO_Init+0xae>
  {
      tmpreg = GPIOx->CRH;
 8000372:	6846      	ldr	r6, [r0, #4]
      for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000374:	2300      	movs	r3, #0
      {
          pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000376:	2701      	movs	r7, #1
          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
          if(currentpin == pos)
          {
              pos = pinpos << 2;
              /* Clear the corresponding high control register bits */
              pinmask = ((uint32_t)0x0F) << pos;
 8000378:	f04f 0c0f 	mov.w	ip, #15
 800037c:	e002      	b.n	8000384 <GPIO_Init+0x78>
  /* Configure the eight high port pins */
  //0x00ff = 1111 1111, pin_8 = 1 0000 0000
  if(GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
      tmpreg = GPIOx->CRH;
      for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 800037e:	3301      	adds	r3, #1
 8000380:	2b08      	cmp	r3, #8
 8000382:	d019      	beq.n	80003b8 <GPIO_Init+0xac>
 8000384:	f103 0208 	add.w	r2, r3, #8
      {
          pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000388:	fa07 f202 	lsl.w	r2, r7, r2
          /* Get the port pins position */
          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800038c:	ea02 0401 	and.w	r4, r2, r1
          if(currentpin == pos)
 8000390:	4294      	cmp	r4, r2
 8000392:	d1f4      	bne.n	800037e <GPIO_Init+0x72>
          {
              pos = pinpos << 2;
 8000394:	009a      	lsls	r2, r3, #2
              /* Clear the corresponding high control register bits */
              pinmask = ((uint32_t)0x0F) << pos;
 8000396:	fa0c f802 	lsl.w	r8, ip, r2
              tmpreg &= ~pinmask;
 800039a:	ea26 0608 	bic.w	r6, r6, r8
              /* Write the mode configuration in the corresponding bits */
              tmpreg |= (currentmode << pos);
 800039e:	fa0e f202 	lsl.w	r2, lr, r2
              /* Reset the corresponding ODR bit */
              if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003a2:	2d28      	cmp	r5, #40	; 0x28
              pos = pinpos << 2;
              /* Clear the corresponding high control register bits */
              pinmask = ((uint32_t)0x0F) << pos;
              tmpreg &= ~pinmask;
              /* Write the mode configuration in the corresponding bits */
              tmpreg |= (currentmode << pos);
 80003a4:	ea46 0602 	orr.w	r6, r6, r2
              /* Reset the corresponding ODR bit */
              if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003a8:	d009      	beq.n	80003be <GPIO_Init+0xb2>
              {
                  GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
              }
              /* Set the corresponding ODR bit */
              if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003aa:	2d48      	cmp	r5, #72	; 0x48
  /* Configure the eight high port pins */
  //0x00ff = 1111 1111, pin_8 = 1 0000 0000
  if(GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
      tmpreg = GPIOx->CRH;
      for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ac:	f103 0301 	add.w	r3, r3, #1
                  GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
              }
              /* Set the corresponding ODR bit */
              if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
              {
                  GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003b0:	bf08      	it	eq
 80003b2:	6104      	streq	r4, [r0, #16]
  /* Configure the eight high port pins */
  //0x00ff = 1111 1111, pin_8 = 1 0000 0000
  if(GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
      tmpreg = GPIOx->CRH;
      for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003b4:	2b08      	cmp	r3, #8
 80003b6:	d1e5      	bne.n	8000384 <GPIO_Init+0x78>
              {
                  GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
              }
          }
      }
      GPIOx->CRH = tmpreg;
 80003b8:	6046      	str	r6, [r0, #4]
 80003ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              /* Write the mode configuration in the corresponding bits */
              tmpreg |= (currentmode << pos);
              /* Reset the corresponding ODR bit */
              if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
              {
                  GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003be:	6144      	str	r4, [r0, #20]
 80003c0:	e7dd      	b.n	800037e <GPIO_Init+0x72>
                /* Write the mode configuration in the corresponding bits */
                tmpreg |= (currentmode << pos);
                /* Reset the corresponding ODR bit */
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
                {
                    GPIOx->BRR = (((uint32_t)0x01) >> pinpos);
 80003c2:	fa27 f203 	lsr.w	r2, r7, r3
 80003c6:	6142      	str	r2, [r0, #20]
 80003c8:	e7b5      	b.n	8000336 <GPIO_Init+0x2a>
 80003ca:	bf00      	nop

080003cc <GPIO_Configuratioin>:
    }
    return bitStatus;
}

HW_GPIO_DEF void GPIO_Configuratioin(void)
{
 80003cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 80003ce:	4e28      	ldr	r6, [pc, #160]	; (8000470 <GPIO_Configuratioin+0xa4>)
    }
    return bitStatus;
}

HW_GPIO_DEF void GPIO_Configuratioin(void)
{
 80003d0:	b083      	sub	sp, #12
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
 80003d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80003d6:	2704      	movs	r7, #4
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 80003d8:	4c26      	ldr	r4, [pc, #152]	; (8000474 <GPIO_Configuratioin+0xa8>)

HW_GPIO_DEF void GPIO_Configuratioin(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003da:	2503      	movs	r5, #3
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 80003dc:	4630      	mov	r0, r6
 80003de:	a901      	add	r1, sp, #4
HW_GPIO_DEF void GPIO_Configuratioin(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80003e0:	2318      	movs	r3, #24
}

HW_GPIO_DEF void GPIO_Configuratioin(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
 80003e2:	f8ad 2004 	strh.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80003e6:	f88d 3007 	strb.w	r3, [sp, #7]

HW_GPIO_DEF void GPIO_Configuratioin(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003ea:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 80003ee:	47a0      	blx	r4
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 80003f0:	4630      	mov	r0, r6
 80003f2:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
 80003f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fa:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003fe:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000402:	f88d 7007 	strb.w	r7, [sp, #7]
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
 8000406:	47a0      	blx	r4
    
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
 8000408:	4630      	mov	r0, r6
 800040a:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStructure.GPIO_Pin = GPIO_USART1_Rx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_USART1, &GPIO_InitStructure);
    
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
 800040e:	2301      	movs	r3, #1
 8000410:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000414:	f88d 7007 	strb.w	r7, [sp, #7]
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
 8000418:	47a0      	blx	r4

    /* Configure gpio as input : Button Right-USER */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY2_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
 800041a:	4630      	mov	r0, r6
 800041c:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);

    /* Configure gpio as input : Button Right-USER */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY2_PIN;
 8000420:	2302      	movs	r3, #2
 8000422:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000426:	2610      	movs	r6, #16
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);

    /* Configure gpio as input : Button Right-USER */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY2_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000428:	f88d 7007 	strb.w	r7, [sp, #7]
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
 800042c:	47a0      	blx	r4
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 800042e:	eb0d 0107 	add.w	r1, sp, r7
    /* Configure gpio as input : Button Right-USER */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY2_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
 8000432:	f44f 7348 	mov.w	r3, #800	; 0x320
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 8000436:	4810      	ldr	r0, [pc, #64]	; (8000478 <GPIO_Configuratioin+0xac>)
    /* Configure gpio as input : Button Right-USER */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY2_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
 8000438:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800043c:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000440:	f88d 6007 	strb.w	r6, [sp, #7]
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 8000444:	47a0      	blx	r4
    LED_ALL_Off();
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <GPIO_Configuratioin+0xb0>)
 8000448:	4798      	blx	r3

    GPIO_InitStructure.GPIO_Pin = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
 800044a:	f240 13ff 	movw	r3, #511	; 0x1ff
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 800044e:	eb0d 0107 	add.w	r1, sp, r7
 8000452:	480b      	ldr	r0, [pc, #44]	; (8000480 <GPIO_Configuratioin+0xb4>)
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
    LED_ALL_Off();

    GPIO_InitStructure.GPIO_Pin = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
 8000454:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000458:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800045c:	f88d 6007 	strb.w	r6, [sp, #7]
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 8000460:	47a0      	blx	r4
    POWER_SEG_On();
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <GPIO_Configuratioin+0xb8>)
 8000464:	4798      	blx	r3
    SEG_AllPin_Off();
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <GPIO_Configuratioin+0xbc>)
 8000468:	4798      	blx	r3
 800046a:	b003      	add	sp, #12
 800046c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800046e:	bf00      	nop
 8000470:	40010800 	.word	0x40010800
 8000474:	0800030d 	.word	0x0800030d
 8000478:	40010c00 	.word	0x40010c00
 800047c:	080007d5 	.word	0x080007d5
 8000480:	40011000 	.word	0x40011000
 8000484:	0800086d 	.word	0x0800086d
 8000488:	0800087d 	.word	0x0800087d

0800048c <USART_Init>:

    USART1->CR1 |= USART_ENABLE;
}

HW_USART_DEF void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	4604      	mov	r4, r0
 8000490:	460d      	mov	r5, r1
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000492:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= USART_STOP_BIT_CLEAR_MASK;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000494:	88ca      	ldrh	r2, [r1, #6]
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000496:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= USART_STOP_BIT_CLEAR_MASK;
 8000498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800049c:	4313      	orrs	r3, r2

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800049e:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80004a0:	8982      	ldrh	r2, [r0, #12]
  tmpreg &= USART_CR1_CLEAR_MASK;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80004a2:	888b      	ldrh	r3, [r1, #4]
 80004a4:	8908      	ldrh	r0, [r1, #8]

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80004a6:	b292      	uxth	r2, r2
  tmpreg &= USART_CR1_CLEAR_MASK;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80004a8:	8949      	ldrh	r1, [r1, #10]
 80004aa:	4303      	orrs	r3, r0
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= USART_CR1_CLEAR_MASK;
 80004ac:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80004b0:	430b      	orrs	r3, r1
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= USART_CR1_CLEAR_MASK;
 80004b2:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80004b6:	4313      	orrs	r3, r2
 80004b8:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80004ba:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 80004bc:	8aa3      	ldrh	r3, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= USART_CR3_CLEAR_MASK;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80004be:	89aa      	ldrh	r2, [r5, #12]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 80004c0:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= USART_CR3_CLEAR_MASK;
 80004c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300

    USART1->CR1 |= USART_ENABLE;
}

HW_USART_DEF void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80004c6:	b086      	sub	sp, #24
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= USART_CR3_CLEAR_MASK;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80004c8:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80004ca:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80004cc:	a801      	add	r0, sp, #4
 80004ce:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <USART_Init+0xb4>)
 80004d0:	4798      	blx	r3
  if (usartxbase == USART1_BASE)
 80004d2:	481c      	ldr	r0, [pc, #112]	; (8000544 <USART_Init+0xb8>)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80004d4:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80004d6:	9904      	ldr	r1, [sp, #16]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_OVER8_Set) != 0)
 80004d8:	89a2      	ldrh	r2, [r4, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80004da:	4284      	cmp	r4, r0
 80004dc:	bf08      	it	eq
 80004de:	460b      	moveq	r3, r1
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_OVER8_Set) != 0)
 80004e0:	b212      	sxth	r2, r2
 80004e2:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
 80004e4:	682a      	ldr	r2, [r5, #0]
 80004e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004ea:	bfb4      	ite	lt
 80004ec:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
 80004ee:	0092      	lslge	r2, r2, #2
 80004f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004f4:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 80004f8:	4e13      	ldr	r6, [pc, #76]	; (8000548 <USART_Init+0xbc>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_OVER8_Set) != 0)
 80004fa:	89a5      	ldrh	r5, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
  }
  tmpreg = (integerdivider / 100) << 4;
 80004fc:	fba6 2003 	umull	r2, r0, r6, r3

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_OVER8_Set) != 0)
 8000500:	b22d      	sxth	r5, r5
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
  }
  tmpreg = (integerdivider / 100) << 4;
 8000502:	0940      	lsrs	r0, r0, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000504:	2264      	movs	r2, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_OVER8_Set) != 0)
 8000506:	2d00      	cmp	r5, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000508:	fb00 3312 	mls	r3, r0, r2, r3
 800050c:	ea4f 1000 	mov.w	r0, r0, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_OVER8_Set) != 0)
 8000510:	db0a      	blt.n	8000528 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000512:	011a      	lsls	r2, r3, #4
 8000514:	3232      	adds	r2, #50	; 0x32
 8000516:	fba6 2302 	umull	r2, r3, r6, r2
 800051a:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800051e:	4303      	orrs	r3, r0
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000520:	b29b      	uxth	r3, r3
 8000522:	8123      	strh	r3, [r4, #8]
}
 8000524:	b006      	add	sp, #24
 8000526:	bd70      	pop	{r4, r5, r6, pc}
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_OVER8_Set) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000528:	00d9      	lsls	r1, r3, #3
 800052a:	3132      	adds	r1, #50	; 0x32
 800052c:	fba6 3101 	umull	r3, r1, r6, r1
 8000530:	f3c1 1242 	ubfx	r2, r1, #5, #3
 8000534:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000538:	b29b      	uxth	r3, r3
 800053a:	8123      	strh	r3, [r4, #8]
}
 800053c:	b006      	add	sp, #24
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	08000261 	.word	0x08000261
 8000544:	40013800 	.word	0x40013800
 8000548:	51eb851f 	.word	0x51eb851f

0800054c <USART1_Init>:
HW_USART_DEF uint16_t USART_ReceiveData(USART_TypeDef* USARTx);
HW_USART_DEF void USART_SendData(USART_TypeDef* USARTx, uint16_t Data);
HW_USART_DEF FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);

HW_USART_DEF void USART1_Init(void)
{
 800054c:	b570      	push	{r4, r5, r6, lr}
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    USART_Init(USART1, &USART_InitStructure);
 800054e:	4c0e      	ldr	r4, [pc, #56]	; (8000588 <USART1_Init+0x3c>)
HW_USART_DEF uint16_t USART_ReceiveData(USART_TypeDef* USARTx);
HW_USART_DEF void USART_SendData(USART_TypeDef* USARTx, uint16_t Data);
HW_USART_DEF FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);

HW_USART_DEF void USART1_Init(void)
{
 8000550:	b084      	sub	sp, #16
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000552:	2300      	movs	r3, #0
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = 115200;
 8000554:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    USART_Init(USART1, &USART_InitStructure);
 8000558:	4620      	mov	r0, r4
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800055a:	250c      	movs	r5, #12

    USART_Init(USART1, &USART_InitStructure);
 800055c:	4669      	mov	r1, sp
 800055e:	4a0b      	ldr	r2, [pc, #44]	; (800058c <USART1_Init+0x40>)
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000560:	f8ad 3004 	strh.w	r3, [sp, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000564:	f8ad 3006 	strh.w	r3, [sp, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8000568:	f8ad 3008 	strh.w	r3, [sp, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800056c:	f8ad 300c 	strh.w	r3, [sp, #12]
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = 115200;
 8000570:	9600      	str	r6, [sp, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000572:	f8ad 500a 	strh.w	r5, [sp, #10]

    USART_Init(USART1, &USART_InitStructure);
 8000576:	4790      	blx	r2

    USART1->CR1 |= USART_ENABLE;
 8000578:	89a3      	ldrh	r3, [r4, #12]
 800057a:	b29b      	uxth	r3, r3
 800057c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000580:	81a3      	strh	r3, [r4, #12]
}
 8000582:	b004      	add	sp, #16
 8000584:	bd70      	pop	{r4, r5, r6, pc}
 8000586:	bf00      	nop
 8000588:	40013800 	.word	0x40013800
 800058c:	0800048d 	.word	0x0800048d

08000590 <NVIC_Init.part.0>:
{
    uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    if(NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    {
        /* Compute the Corresponding IRQ Priority --------------------------------*/    
        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 0x08;
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <NVIC_Init.part.0+0x44>)
{
    /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    SCB->AIRCR = NVIC_AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
}

HW_NVIC_DEF void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
 8000592:	b430      	push	{r4, r5}
{
    uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    if(NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    {
        /* Compute the Corresponding IRQ Priority --------------------------------*/    
        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 0x08;
 8000594:	68da      	ldr	r2, [r3, #12]
        tmppre = (0x4 - tmppriority);
        tmpsub = tmpsub >> tmppriority;
        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000596:	7881      	ldrb	r1, [r0, #2]
{
    uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    if(NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    {
        /* Compute the Corresponding IRQ Priority --------------------------------*/    
        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 0x08;
 8000598:	43d2      	mvns	r2, r2
        tmppre = (0x4 - tmppriority);
        tmpsub = tmpsub >> tmppriority;
        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800059a:	7843      	ldrb	r3, [r0, #1]
{
    uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    if(NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    {
        /* Compute the Corresponding IRQ Priority --------------------------------*/    
        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 0x08;
 800059c:	f3c2 2202 	ubfx	r2, r2, #8, #3
        tmppre = (0x4 - tmppriority);
        tmpsub = tmpsub >> tmppriority;
 80005a0:	240f      	movs	r4, #15
 80005a2:	40d4      	lsrs	r4, r2
    uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    if(NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    {
        /* Compute the Corresponding IRQ Priority --------------------------------*/    
        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 0x08;
        tmppre = (0x4 - tmppriority);
 80005a4:	f1c2 0504 	rsb	r5, r2, #4
        tmpsub = tmpsub >> tmppriority;
        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005a8:	fa03 f205 	lsl.w	r2, r3, r5
        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80005ac:	ea04 0301 	and.w	r3, r4, r1
 80005b0:	4313      	orrs	r3, r2
        tmppriority = tmppriority << 0x04;
        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005b2:	4909      	ldr	r1, [pc, #36]	; (80005d8 <NVIC_Init.part.0+0x48>)
 80005b4:	7802      	ldrb	r2, [r0, #0]
        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 0x08;
        tmppre = (0x4 - tmppriority);
        tmpsub = tmpsub >> tmppriority;
        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
        tmppriority = tmppriority << 0x04;
 80005b6:	011b      	lsls	r3, r3, #4
        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	440a      	add	r2, r1
 80005bc:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
        /* Enable the Selected IRQ Channels --------------------------------------*/
        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80005c0:	7803      	ldrb	r3, [r0, #0]
 80005c2:	2201      	movs	r2, #1
 80005c4:	f003 001f 	and.w	r0, r3, #31
 80005c8:	4082      	lsls	r2, r0
 80005ca:	095b      	lsrs	r3, r3, #5
 80005cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    else
    {
        /* Disable the Selected IRQ Channels -------------------------------------*/
        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =  (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    }
}
 80005d0:	bc30      	pop	{r4, r5}
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000e100 	.word	0xe000e100

080005dc <NVIC_Configuration>:
{
    SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
}

HW_NVIC_DEF void NVIC_Configuration(void)
{
 80005dc:	b570      	push	{r4, r5, r6, lr}
}

HW_NVIC_DEF void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    SCB->AIRCR = NVIC_AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <NVIC_Configuration+0x48>)
HW_NVIC_DEF void NVIC_SetPriority(IRQn_TypeDef IRQn, uint32_t priority);
HW_NVIC_DEF void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);

HW_NVIC_DEF void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <NVIC_Configuration+0x4c>)
}

HW_NVIC_DEF void NVIC_Configuration(void)
{
 80005e2:	b082      	sub	sp, #8
HW_NVIC_DEF void NVIC_SetPriority(IRQn_TypeDef IRQn, uint32_t priority);
HW_NVIC_DEF void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);

HW_NVIC_DEF void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80005e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80005e8:	6099      	str	r1, [r3, #8]
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
    /* Configure one bit for preemption priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
    /* Enable the EXTI0 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80005ea:	2500      	movs	r5, #0
}

HW_NVIC_DEF void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    SCB->AIRCR = NVIC_AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80005ec:	60da      	str	r2, [r3, #12]
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
    /* Enable the EXTI0 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80005ee:	2401      	movs	r4, #1
 80005f0:	a801      	add	r0, sp, #4
    /* Set the Vector Table base location at 0x08000000 */ 
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
    /* Configure one bit for preemption priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
    /* Enable the EXTI0 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 80005f2:	2306      	movs	r3, #6
 80005f4:	4e0d      	ldr	r6, [pc, #52]	; (800062c <NVIC_Configuration+0x50>)
 80005f6:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80005fa:	f88d 5005 	strb.w	r5, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80005fe:	f88d 5006 	strb.w	r5, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000602:	f88d 4007 	strb.w	r4, [sp, #7]
 8000606:	47b0      	blx	r6
    NVIC_Init(&NVIC_InitStructure);
    /* Enable the EXTI1 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8000608:	2307      	movs	r3, #7
 800060a:	a801      	add	r0, sp, #4
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800060c:	f88d 5005 	strb.w	r5, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000610:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000614:	f88d 4007 	strb.w	r4, [sp, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
    /* Enable the EXTI1 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8000618:	f88d 3004 	strb.w	r3, [sp, #4]
 800061c:	47b0      	blx	r6
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

}
 800061e:	b002      	add	sp, #8
 8000620:	bd70      	pop	{r4, r5, r6, pc}
 8000622:	bf00      	nop
 8000624:	05fa0700 	.word	0x05fa0700
 8000628:	e000ed00 	.word	0xe000ed00
 800062c:	08000591 	.word	0x08000591

08000630 <EXTI_Init.part.0>:
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
}

HW_EXTI_DEF void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
 8000630:	b470      	push	{r4, r5, r6}
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000632:	6804      	ldr	r4, [r0, #0]
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <EXTI_Init.part.0+0x60>)
 8000636:	43e6      	mvns	r6, r4
 8000638:	681d      	ldr	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800063a:	7902      	ldrb	r2, [r0, #4]
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800063c:	4035      	ands	r5, r6
 800063e:	601d      	str	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000640:	6859      	ldr	r1, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000642:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000646:	4031      	ands	r1, r6
 8000648:	6059      	str	r1, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800064a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800064e:	6815      	ldr	r5, [r2, #0]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000650:	7941      	ldrb	r1, [r0, #5]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000652:	432c      	orrs	r4, r5
 8000654:	6014      	str	r4, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000656:	6802      	ldr	r2, [r0, #0]
 8000658:	689c      	ldr	r4, [r3, #8]
 800065a:	43d5      	mvns	r5, r2
 800065c:	402c      	ands	r4, r5
 800065e:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000660:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000662:	2910      	cmp	r1, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000664:	ea00 0005 	and.w	r0, r0, r5
 8000668:	60d8      	str	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800066a:	d008      	beq.n	800067e <EXTI_Init.part.0+0x4e>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800066c:	bc70      	pop	{r4, r5, r6}
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800066e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000672:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000676:	6819      	ldr	r1, [r3, #0]
 8000678:	430a      	orrs	r2, r1
 800067a:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800067c:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800067e:	6899      	ldr	r1, [r3, #8]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000680:	bc70      	pop	{r4, r5, r6}
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000682:	4311      	orrs	r1, r2
 8000684:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000686:	68d9      	ldr	r1, [r3, #12]
 8000688:	430a      	orrs	r2, r1
 800068a:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40010400 	.word	0x40010400

08000694 <EXTI0_IRQHandler>:
{
    EXTI->PR = EXTI_Line;
}

HW_EXTI_DEF void EXTI0_IRQHandler(void)
{
 8000694:	b508      	push	{r3, lr}
HW_EXTI_DEF ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    ITStatus bitStatus = RESET;
    uint32_t enableStatus = 0;

    enableStatus = EXTI->IMR & EXTI_Line;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <EXTI0_IRQHandler+0x1c>)
 8000698:	6819      	ldr	r1, [r3, #0]
    if(((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enableStatus != (uint32_t)RESET))
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	07d0      	lsls	r0, r2, #31
 800069e:	d506      	bpl.n	80006ae <EXTI0_IRQHandler+0x1a>
 80006a0:	07ca      	lsls	r2, r1, #31
 80006a2:	d504      	bpl.n	80006ae <EXTI0_IRQHandler+0x1a>
    return bitStatus;
}

HW_EXTI_DEF void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    EXTI->PR = EXTI_Line;
 80006a4:	2201      	movs	r2, #1
 80006a6:	615a      	str	r2, [r3, #20]
HW_EXTI_DEF void EXTI0_IRQHandler(void)
{
    if(EXTI_GetITStatus(GPIO_EXTI_Line_KEY1) != RESET)
    {
        EXTI_ClearITPendingBit(GPIO_EXTI_Line_KEY1);
        printf("LEFT-WKUP Button Press!!\n");
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <EXTI0_IRQHandler+0x20>)
 80006aa:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <EXTI0_IRQHandler+0x24>)
 80006ac:	4798      	blx	r3
 80006ae:	bd08      	pop	{r3, pc}
 80006b0:	40010400 	.word	0x40010400
 80006b4:	080014c0 	.word	0x080014c0
 80006b8:	0800095d 	.word	0x0800095d

080006bc <EXTI1_IRQHandler>:
    }

}

HW_EXTI_DEF void EXTI1_IRQHandler(void)
{
 80006bc:	b508      	push	{r3, lr}
HW_EXTI_DEF ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    ITStatus bitStatus = RESET;
    uint32_t enableStatus = 0;

    enableStatus = EXTI->IMR & EXTI_Line;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <EXTI1_IRQHandler+0x1c>)
 80006c0:	6819      	ldr	r1, [r3, #0]
    if(((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enableStatus != (uint32_t)RESET))
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	0790      	lsls	r0, r2, #30
 80006c6:	d506      	bpl.n	80006d6 <EXTI1_IRQHandler+0x1a>
 80006c8:	078a      	lsls	r2, r1, #30
 80006ca:	d504      	bpl.n	80006d6 <EXTI1_IRQHandler+0x1a>
    return bitStatus;
}

HW_EXTI_DEF void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    EXTI->PR = EXTI_Line;
 80006cc:	2202      	movs	r2, #2
 80006ce:	615a      	str	r2, [r3, #20]
HW_EXTI_DEF void EXTI1_IRQHandler(void)
{
    if(EXTI_GetITStatus(GPIO_EXTI_Line_KEY2) != RESET)
    {
        EXTI_ClearITPendingBit(GPIO_EXTI_Line_KEY2);
        printf("RIGHT-WKUP Button Press!!\n");
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <EXTI1_IRQHandler+0x20>)
 80006d2:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <EXTI1_IRQHandler+0x24>)
 80006d4:	4798      	blx	r3
 80006d6:	bd08      	pop	{r3, pc}
 80006d8:	40010400 	.word	0x40010400
 80006dc:	080014dc 	.word	0x080014dc
 80006e0:	0800095d 	.word	0x0800095d

080006e4 <EXTI2_IRQHandler>:
    }

}

HW_EXTI_DEF void EXTI2_IRQHandler(void)
{
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <EXTI3_IRQHandler>:

}

HW_EXTI_DEF void EXTI3_IRQHandler(void)
{
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <EXTI4_IRQHandler>:

}

HW_EXTI_DEF void EXTI4_IRQHandler(void)
{
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop

080006f0 <EXTI_Configuration>:




HW_EXTI_DEF void EXTI_Configuration(void)
{ 
 80006f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
HW_EXTI_DEF void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
  uint32_t tmp = 0x00;
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80006f4:	4c14      	ldr	r4, [pc, #80]	; (8000748 <EXTI_Configuration+0x58>)




HW_EXTI_DEF void EXTI_Configuration(void)
{ 
 80006f6:	b082      	sub	sp, #8
HW_EXTI_DEF void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
  uint32_t tmp = 0x00;
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80006f8:	68a3      	ldr	r3, [r4, #8]
    /* Configure gpio as input : Button Left-WKUP */
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY1);

    /* Configure EXTI Line to generate an interrupt */
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY1;
 80006fa:	2501      	movs	r5, #1
HW_EXTI_DEF void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
  uint32_t tmp = 0x00;
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80006fc:	f023 030f 	bic.w	r3, r3, #15
 8000700:	60a3      	str	r3, [r4, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000702:	68a3      	ldr	r3, [r4, #8]
 8000704:	4668      	mov	r0, sp
 8000706:	60a3      	str	r3, [r4, #8]
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY1);

    /* Configure EXTI Line to generate an interrupt */
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY1;
    EXTI_InitStructure.EXTI_Mode    = EXTI_Mode_Interrupt;
 8000708:	f04f 0800 	mov.w	r8, #0
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800070c:	270c      	movs	r7, #12
 800070e:	4e0f      	ldr	r6, [pc, #60]	; (800074c <EXTI_Configuration+0x5c>)
    /* Configure gpio as input : Button Left-WKUP */
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY1);

    /* Configure EXTI Line to generate an interrupt */
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY1;
 8000710:	9500      	str	r5, [sp, #0]
    EXTI_InitStructure.EXTI_Mode    = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000712:	f88d 5006 	strb.w	r5, [sp, #6]
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY1);

    /* Configure EXTI Line to generate an interrupt */
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY1;
    EXTI_InitStructure.EXTI_Mode    = EXTI_Mode_Interrupt;
 8000716:	f88d 8004 	strb.w	r8, [sp, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800071a:	f88d 7005 	strb.w	r7, [sp, #5]
 800071e:	47b0      	blx	r6
HW_EXTI_DEF void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
  uint32_t tmp = 0x00;
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000720:	68a3      	ldr	r3, [r4, #8]
 8000722:	4668      	mov	r0, sp
 8000724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000728:	60a3      	str	r3, [r4, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800072a:	68a2      	ldr	r2, [r4, #8]
    /* Configure gpio as input : Button Right-USER */
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY2);

    /* Configure EXTI Line to generate an interrupt */  
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY2;
 800072c:	2302      	movs	r3, #2
{
  uint32_t tmp = 0x00;
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800072e:	60a2      	str	r2, [r4, #8]
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY2);

    /* Configure EXTI Line to generate an interrupt */  
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY2;
    EXTI_InitStructure.EXTI_Mode    = EXTI_Mode_Interrupt;
 8000730:	f88d 8004 	strb.w	r8, [sp, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000734:	f88d 7005 	strb.w	r7, [sp, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000738:	f88d 5006 	strb.w	r5, [sp, #6]
    /* Configure gpio as input : Button Right-USER */
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY2);

    /* Configure EXTI Line to generate an interrupt */  
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY2;
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	47b0      	blx	r6
    EXTI_InitStructure.EXTI_Mode    = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
}
 8000740:	b002      	add	sp, #8
 8000742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000746:	bf00      	nop
 8000748:	40010000 	.word	0x40010000
 800074c:	08000631 	.word	0x08000631

08000750 <SysTick_Handler>:
    SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1 << SYSTICK_ENABLE) | (1 << SYSTICK_TICKINT);
    return (0);
}

HW_SYSTICK_DEF void SysTick_Handler(void)
{
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <LED_RED_On>:
HW_LED_DEF void LED_TEST(void);


HW_LED_DEF void LED_RED_On(void)
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 8000754:	4a02      	ldr	r2, [pc, #8]	; (8000760 <LED_RED_On+0xc>)
 8000756:	6953      	ldr	r3, [r2, #20]
 8000758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4770      	bx	lr
 8000760:	40010c00 	.word	0x40010c00

08000764 <LED_RED_Off>:
}
HW_LED_DEF void LED_RED_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 8000764:	4a02      	ldr	r2, [pc, #8]	; (8000770 <LED_RED_Off+0xc>)
 8000766:	6913      	ldr	r3, [r2, #16]
 8000768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076c:	6113      	str	r3, [r2, #16]
 800076e:	4770      	bx	lr
 8000770:	40010c00 	.word	0x40010c00

08000774 <LED_YELLOW_On>:
}
HW_LED_DEF void LED_YELLOW_On(void)
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 8000774:	4a02      	ldr	r2, [pc, #8]	; (8000780 <LED_YELLOW_On+0xc>)
 8000776:	6953      	ldr	r3, [r2, #20]
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4770      	bx	lr
 8000780:	40010c00 	.word	0x40010c00

08000784 <LED_YELLOW_Off>:
}
HW_LED_DEF void LED_YELLOW_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 8000784:	4a02      	ldr	r2, [pc, #8]	; (8000790 <LED_YELLOW_Off+0xc>)
 8000786:	6913      	ldr	r3, [r2, #16]
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	6113      	str	r3, [r2, #16]
 800078e:	4770      	bx	lr
 8000790:	40010c00 	.word	0x40010c00

08000794 <LED_BLUE_On>:
}
HW_LED_DEF void LED_BLUE_On(void)
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 8000794:	4a02      	ldr	r2, [pc, #8]	; (80007a0 <LED_BLUE_On+0xc>)
 8000796:	6953      	ldr	r3, [r2, #20]
 8000798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4770      	bx	lr
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <LED_BLUE_Off>:
}
HW_LED_DEF void LED_BLUE_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 80007a4:	4a02      	ldr	r2, [pc, #8]	; (80007b0 <LED_BLUE_Off+0xc>)
 80007a6:	6913      	ldr	r3, [r2, #16]
 80007a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ac:	6113      	str	r3, [r2, #16]
 80007ae:	4770      	bx	lr
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <LED_ALL_On>:
HW_LED_DEF void LED_TEST(void);


HW_LED_DEF void LED_RED_On(void)
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <LED_ALL_On+0x1c>)
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007bc:	615a      	str	r2, [r3, #20]
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
}
HW_LED_DEF void LED_YELLOW_On(void)
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	f042 0220 	orr.w	r2, r2, #32
 80007c4:	615a      	str	r2, [r3, #20]
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
}
HW_LED_DEF void LED_BLUE_On(void)
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 80007c6:	695a      	ldr	r2, [r3, #20]
 80007c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	4770      	bx	lr
 80007d0:	40010c00 	.word	0x40010c00

080007d4 <LED_ALL_Off>:
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
}
HW_LED_DEF void LED_RED_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <LED_ALL_Off+0x1c>)
 80007d6:	691a      	ldr	r2, [r3, #16]
 80007d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007dc:	611a      	str	r2, [r3, #16]
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
}
HW_LED_DEF void LED_YELLOW_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 80007de:	691a      	ldr	r2, [r3, #16]
 80007e0:	f042 0220 	orr.w	r2, r2, #32
 80007e4:	611a      	str	r2, [r3, #16]
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
}
HW_LED_DEF void LED_BLUE_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 80007e6:	691a      	ldr	r2, [r3, #16]
 80007e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	4770      	bx	lr
 80007f0:	40010c00 	.word	0x40010c00

080007f4 <LED_MULT_OnOff>:
    LED_RED_Off();
    LED_YELLOW_Off();
    LED_BLUE_Off();
}
HW_LED_DEF void LED_MULT_OnOff(uint32_t count)
{
 80007f4:	b570      	push	{r4, r5, r6, lr}
    for(; count > 0; count --)
 80007f6:	4606      	mov	r6, r0
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d02a      	beq.n	8000852 <LED_MULT_OnOff+0x5e>
 80007fc:	4d15      	ldr	r5, [pc, #84]	; (8000854 <LED_MULT_OnOff+0x60>)
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
}
HW_LED_DEF void LED_RED_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 80007fe:	4c16      	ldr	r4, [pc, #88]	; (8000858 <LED_MULT_OnOff+0x64>)
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000806:	6123      	str	r3, [r4, #16]
}
HW_LED_DEF void LED_YELLOW_On(void)
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 8000808:	6963      	ldr	r3, [r4, #20]
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
}
HW_LED_DEF void LED_BLUE_On(void)
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 8000810:	6963      	ldr	r3, [r4, #20]
 8000812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000816:	6163      	str	r3, [r4, #20]
    for(; count > 0; count --)
    {
        LED_RED_Off();
        LED_YELLOW_On();
        LED_BLUE_On();
        Hw_1_second();
 8000818:	47a8      	blx	r5
HW_LED_DEF void LED_TEST(void);


HW_LED_DEF void LED_RED_On(void)
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 800081a:	6963      	ldr	r3, [r4, #20]
 800081c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000820:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
}
HW_LED_DEF void LED_YELLOW_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 8000822:	6923      	ldr	r3, [r4, #16]
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	6123      	str	r3, [r4, #16]
}
HW_LED_DEF void LED_BLUE_On(void)
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 800082a:	6963      	ldr	r3, [r4, #20]
 800082c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000830:	6163      	str	r3, [r4, #20]
        Hw_1_second();

        LED_RED_On();
        LED_YELLOW_Off();
        LED_BLUE_On();
        Hw_1_second();
 8000832:	47a8      	blx	r5
HW_LED_DEF void LED_TEST(void);


HW_LED_DEF void LED_RED_On(void)
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 8000834:	6963      	ldr	r3, [r4, #20]
 8000836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800083a:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
}
HW_LED_DEF void LED_YELLOW_On(void)
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 800083c:	6963      	ldr	r3, [r4, #20]
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
}
HW_LED_DEF void LED_BLUE_Off(void)
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 8000844:	6923      	ldr	r3, [r4, #16]
 8000846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800084a:	6123      	str	r3, [r4, #16]
        Hw_1_second();

        LED_RED_On();
        LED_YELLOW_On();
        LED_BLUE_Off();
        Hw_1_second();
 800084c:	47a8      	blx	r5
    LED_YELLOW_Off();
    LED_BLUE_Off();
}
HW_LED_DEF void LED_MULT_OnOff(uint32_t count)
{
    for(; count > 0; count --)
 800084e:	3e01      	subs	r6, #1
 8000850:	d1d6      	bne.n	8000800 <LED_MULT_OnOff+0xc>
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	08000db5 	.word	0x08000db5
 8000858:	40010c00 	.word	0x40010c00

0800085c <LED_TEST>:
        LED_BLUE_Off();
        Hw_1_second();
    }
}
HW_LED_DEF void LED_TEST(void)
{
 800085c:	b508      	push	{r3, lr}
        Hw_1_second();
        LED_ALL_Off();
        Hw_1_second();
        LED_ALL_On();
    #else
        LED_MULT_OnOff(30);
 800085e:	201e      	movs	r0, #30
 8000860:	4b01      	ldr	r3, [pc, #4]	; (8000868 <LED_TEST+0xc>)
 8000862:	4798      	blx	r3
 8000864:	bd08      	pop	{r3, pc}
 8000866:	bf00      	nop
 8000868:	080007f5 	.word	0x080007f5

0800086c <POWER_SEG_On>:
HW_SEG_DEF void SEG_Number_On(unsigned int num);
HW_SEG_DEF void SEG_TEST(void);

HW_SEG_DEF void POWER_SEG_On(void)
{
    GPIO_7_SEG->BRR |= GPIO_7_SEG_POWER_PIN;
 800086c:	4a02      	ldr	r2, [pc, #8]	; (8000878 <POWER_SEG_On+0xc>)
 800086e:	6953      	ldr	r3, [r2, #20]
 8000870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4770      	bx	lr
 8000878:	40011000 	.word	0x40011000

0800087c <SEG_AllPin_Off>:
    GPIO_7_SEG->BRR |= pinNum;
}

HW_SEG_DEF void SEG_OnePin_Off(uint16_t pinNum)
{
    GPIO_7_SEG->BSRR |= pinNum;
 800087c:	4a02      	ldr	r2, [pc, #8]	; (8000888 <SEG_AllPin_Off+0xc>)
 800087e:	6913      	ldr	r3, [r2, #16]
 8000880:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000884:	6113      	str	r3, [r2, #16]
 8000886:	4770      	bx	lr
 8000888:	40011000 	.word	0x40011000

0800088c <print_byte>:
#define LD_PRINTF_LOCAL
#include "Ld_printf.h"

void print_byte(unsigned int c)
{
    if (c == '\n') print_byte('\r');
 800088c:	280a      	cmp	r0, #10

#define LD_PRINTF_LOCAL
#include "Ld_printf.h"

void print_byte(unsigned int c)
{
 800088e:	b510      	push	{r4, lr}
 8000890:	4604      	mov	r4, r0
    if (c == '\n') print_byte('\r');
 8000892:	d006      	beq.n	80008a2 <print_byte+0x16>
    while( !((*(volatile unsigned long *) 0x40013800) & 0x80) ) ;
 8000894:	4a05      	ldr	r2, [pc, #20]	; (80008ac <print_byte+0x20>)
 8000896:	6813      	ldr	r3, [r2, #0]
 8000898:	061b      	lsls	r3, r3, #24
 800089a:	d5fc      	bpl.n	8000896 <print_byte+0xa>
    *(volatile unsigned long *) 0x40013804 = c;
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <print_byte+0x24>)
 800089e:	601c      	str	r4, [r3, #0]
 80008a0:	bd10      	pop	{r4, pc}
#define LD_PRINTF_LOCAL
#include "Ld_printf.h"

void print_byte(unsigned int c)
{
    if (c == '\n') print_byte('\r');
 80008a2:	200d      	movs	r0, #13
 80008a4:	f7ff fff2 	bl	800088c <print_byte>
 80008a8:	e7f4      	b.n	8000894 <print_byte+0x8>
 80008aa:	bf00      	nop
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40013804 	.word	0x40013804

080008b4 <get_byte>:
    *(volatile unsigned long *) 0x40013804 = c;
}

LD_PRINTF_DEF char get_byte(void)
{
    while( !((*(volatile unsigned long *) 0x40013800) & 0x20) ) ;
 80008b4:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <get_byte+0x10>)
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	069b      	lsls	r3, r3, #26
 80008ba:	d5fc      	bpl.n	80008b6 <get_byte+0x2>
    return (char) *(volatile unsigned long *) 0x40013804;
 80008bc:	4b02      	ldr	r3, [pc, #8]	; (80008c8 <get_byte+0x14>)
 80008be:	6818      	ldr	r0, [r3, #0]
    
}
 80008c0:	b2c0      	uxtb	r0, r0
 80008c2:	4770      	bx	lr
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40013804 	.word	0x40013804

080008cc <StrCmp>:
        return 0;
} // StrNCmp.

// ���ڿ� s1, s2�� ��.
// return : 0 : equil                ret : s1 > s2                -ret : s1 < s2
int StrCmp(char *s1, char *s2){
 80008cc:	b410      	push	{r4}
        for (; *s1 && *s2; s1++, s2++){
 80008ce:	7802      	ldrb	r2, [r0, #0]
 80008d0:	b182      	cbz	r2, 80008f4 <StrCmp+0x28>
 80008d2:	780b      	ldrb	r3, [r1, #0]
 80008d4:	b1ab      	cbz	r3, 8000902 <StrCmp+0x36>
                if (*s1 != *s2) return ((int)(*s1) - (int)(*s2));
 80008d6:	429a      	cmp	r2, r3
 80008d8:	bf08      	it	eq
 80008da:	1c4c      	addeq	r4, r1, #1
 80008dc:	d005      	beq.n	80008ea <StrCmp+0x1e>
 80008de:	e012      	b.n	8000906 <StrCmp+0x3a>
} // StrNCmp.

// ���ڿ� s1, s2�� ��.
// return : 0 : equil                ret : s1 > s2                -ret : s1 < s2
int StrCmp(char *s1, char *s2){
        for (; *s1 && *s2; s1++, s2++){
 80008e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80008e4:	b16b      	cbz	r3, 8000902 <StrCmp+0x36>
                if (*s1 != *s2) return ((int)(*s1) - (int)(*s2));
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d10d      	bne.n	8000906 <StrCmp+0x3a>
} // StrNCmp.

// ���ڿ� s1, s2�� ��.
// return : 0 : equil                ret : s1 > s2                -ret : s1 < s2
int StrCmp(char *s1, char *s2){
        for (; *s1 && *s2; s1++, s2++){
 80008ea:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80008ee:	4621      	mov	r1, r4
 80008f0:	2a00      	cmp	r2, #0
 80008f2:	d1f5      	bne.n	80008e0 <StrCmp+0x14>
                if (*s1 != *s2) return ((int)(*s1) - (int)(*s2));
        }
        if (*s1 || *s2) return ((int)(*s1) - (int)(*s2));
 80008f4:	7808      	ldrb	r0, [r1, #0]
 80008f6:	b108      	cbz	r0, 80008fc <StrCmp+0x30>
 80008f8:	2200      	movs	r2, #0
 80008fa:	1a10      	subs	r0, r2, r0
        return 0;
}        // StrCmp.
 80008fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000900:	4770      	bx	lr
        return 0;
} // StrNCmp.

// ���ڿ� s1, s2�� ��.
// return : 0 : equil                ret : s1 > s2                -ret : s1 < s2
int StrCmp(char *s1, char *s2){
 8000902:	2000      	movs	r0, #0
 8000904:	e7f9      	b.n	80008fa <StrCmp+0x2e>
        for (; *s1 && *s2; s1++, s2++){
                if (*s1 != *s2) return ((int)(*s1) - (int)(*s2));
 8000906:	1ad0      	subs	r0, r2, r3
        }
        if (*s1 || *s2) return ((int)(*s1) - (int)(*s2));
        return 0;
}        // StrCmp.
 8000908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <DecToLong>:
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000910:	b1e8      	cbz	r0, 800094e <DecToLong+0x3e>
 8000912:	7803      	ldrb	r3, [r0, #0]
 8000914:	b1db      	cbz	r3, 800094e <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 8000916:	2300      	movs	r3, #0
 8000918:	600b      	str	r3, [r1, #0]
 800091a:	7802      	ldrb	r2, [r0, #0]
 800091c:	b1e2      	cbz	r2, 8000958 <DecToLong+0x48>
// ���� : 10���� ���ڿ� s���� ������ ����� retval�� ����Ű�� ��ġ�� ���.
// �Ű� : s      : ��ȯ�� ���ڿ��� �ּ�.
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
 800091e:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8000920:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000924:	b2e2      	uxtb	r2, r4
 8000926:	2a09      	cmp	r2, #9
 8000928:	d902      	bls.n	8000930 <DecToLong+0x20>
 800092a:	e012      	b.n	8000952 <DecToLong+0x42>
 800092c:	2d09      	cmp	r5, #9
 800092e:	d810      	bhi.n	8000952 <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8000930:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000934:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000938:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800093a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 800093e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000942:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000944:	2a00      	cmp	r2, #0
 8000946:	d1f1      	bne.n	800092c <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000948:	2001      	movs	r0, #1
}        // DecToLong.
 800094a:	bc30      	pop	{r4, r5}
 800094c:	4770      	bx	lr
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 800094e:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 8000950:	4770      	bx	lr
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000952:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 8000954:	bc30      	pop	{r4, r5}
 8000956:	4770      	bx	lr
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000958:	2001      	movs	r0, #1
}        // DecToLong.
 800095a:	4770      	bx	lr

0800095c <printf>:
// �Ű� : fmt : printf()�� �����ϳ� "%s", "%c", "%d", "%x" ��� ����.
//              %d, %x�� ��쿡�� "%08x", "%8x"�� ���� ��Ÿ�� ���̿� �� ������ 0���� ä���� ���� ����.
// ��ȯ : ����.
// ���� : ����.
LD_PRINTF_DEF void printf(char *fmt, ...)
{
 800095c:	b40f      	push	{r0, r1, r2, r3}
 800095e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000962:	b089      	sub	sp, #36	; 0x24
        int                i;
        va_list args;
        char        *s=fmt;
 8000964:	f10d 0848 	add.w	r8, sp, #72	; 0x48
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000968:	4ec6      	ldr	r6, [pc, #792]	; (8000c84 <printf+0x328>)
// ���� : ����.
LD_PRINTF_DEF void printf(char *fmt, ...)
{
        int                i;
        va_list args;
        char        *s=fmt;
 800096a:	f858 5b04 	ldr.w	r5, [r8], #4
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 800096e:	7828      	ldrb	r0, [r5, #0]
 8000970:	b3a0      	cbz	r0, 80009dc <printf+0x80>
                if (*s=='%'){
 8000972:	2825      	cmp	r0, #37	; 0x25
 8000974:	d137      	bne.n	80009e6 <printf+0x8a>
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
 8000976:	ac08      	add	r4, sp, #32
 8000978:	f804 0d18 	strb.w	r0, [r4, #-24]!
 800097c:	4621      	mov	r1, r4
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
                if (*s=='%'){
                        s++;
 800097e:	1c6b      	adds	r3, r5, #1
 8000980:	f105 0c0a 	add.w	ip, r5, #10
 8000984:	1b5f      	subs	r7, r3, r5
 8000986:	469e      	mov	lr, r3
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000988:	f813 0b01 	ldrb.w	r0, [r3], #1
 800098c:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 8000990:	2a01      	cmp	r2, #1
 8000992:	f240 8095 	bls.w	8000ac0 <printf+0x164>
 8000996:	2878      	cmp	r0, #120	; 0x78
 8000998:	f000 8092 	beq.w	8000ac0 <printf+0x164>
 800099c:	2873      	cmp	r0, #115	; 0x73
 800099e:	f000 808f 	beq.w	8000ac0 <printf+0x164>
 80009a2:	2825      	cmp	r0, #37	; 0x25
 80009a4:	f000 808c 	beq.w	8000ac0 <printf+0x164>
        while (*s){
                if (*s=='%'){
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
 80009a8:	4563      	cmp	r3, ip
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 80009aa:	461a      	mov	r2, r3
 80009ac:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (*s){
                if (*s=='%'){
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
 80009b0:	d1e8      	bne.n	8000984 <printf+0x28>
 80009b2:	f89e 0001 	ldrb.w	r0, [lr, #1]
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 80009b6:	1c55      	adds	r5, r2, #1
 80009b8:	2864      	cmp	r0, #100	; 0x64
 80009ba:	f000 808f 	beq.w	8000adc <printf+0x180>
 80009be:	d815      	bhi.n	80009ec <printf+0x90>
 80009c0:	2825      	cmp	r0, #37	; 0x25
 80009c2:	f000 810c 	beq.w	8000bde <printf+0x282>
 80009c6:	2863      	cmp	r0, #99	; 0x63
 80009c8:	d1d1      	bne.n	800096e <printf+0x12>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 80009ca:	f898 0000 	ldrb.w	r0, [r8]
 80009ce:	47b0      	blx	r6
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 80009d0:	7828      	ldrb	r0, [r5, #0]
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
 80009d2:	f108 0404 	add.w	r4, r8, #4
 80009d6:	46a0      	mov	r8, r4
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1ca      	bne.n	8000972 <printf+0x16>
                        s++;
                }
        }
        va_end(args);
        return;
}
 80009dc:	b009      	add	sp, #36	; 0x24
 80009de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e2:	b004      	add	sp, #16
 80009e4:	4770      	bx	lr

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 80009e6:	47b0      	blx	r6
                                        break;
                        }
                }
                else {
                        PrintChar("%c", *s);
                        s++;
 80009e8:	3501      	adds	r5, #1
 80009ea:	e7c0      	b.n	800096e <printf+0x12>
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 80009ec:	2873      	cmp	r0, #115	; 0x73
 80009ee:	f000 80f8 	beq.w	8000be2 <printf+0x286>
 80009f2:	2878      	cmp	r0, #120	; 0x78
 80009f4:	d1bb      	bne.n	800096e <printf+0x12>
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 80009f6:	f8d8 a000 	ldr.w	sl, [r8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 80009fa:	f89d 3008 	ldrb.w	r3, [sp, #8]

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80009fe:	2700      	movs	r7, #0
 8000a00:	f8cd a000 	str.w	sl, [sp]
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 8000a04:	f108 0804 	add.w	r8, r8, #4

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000a08:	9701      	str	r7, [sp, #4]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 80ff 	beq.w	8000c0e <printf+0x2b2>
                if (c=='x') break;
 8000a10:	2b78      	cmp	r3, #120	; 0x78
 8000a12:	f000 80fc 	beq.w	8000c0e <printf+0x2b2>
 8000a16:	46bb      	mov	fp, r7
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a18:	46b9      	mov	r9, r7


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 8000a1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000a1e:	2a08      	cmp	r2, #8
 8000a20:	d84a      	bhi.n	8000ab8 <printf+0x15c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a22:	f814 300b 	ldrb.w	r3, [r4, fp]
 8000a26:	eb04 010b 	add.w	r1, r4, fp
 8000a2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a2e:	2a09      	cmp	r2, #9
 8000a30:	f200 814f 	bhi.w	8000cd2 <printf+0x376>
 8000a34:	a805      	add	r0, sp, #20
 8000a36:	4686      	mov	lr, r0
 8000a38:	2200      	movs	r2, #0
                                tol[j] = s[i++];
 8000a3a:	f80e 3b01 	strb.w	r3, [lr], #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                                tol[j] = s[i++];
 8000a42:	f10b 0b01 	add.w	fp, fp, #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a46:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8000a4a:	f1bc 0f09 	cmp.w	ip, #9
 8000a4e:	f102 0201 	add.w	r2, r2, #1
 8000a52:	d9f2      	bls.n	8000a3a <printf+0xde>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a54:	ab08      	add	r3, sp, #32
 8000a56:	441a      	add	r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8000a58:	a901      	add	r1, sp, #4
 8000a5a:	4b8b      	ldr	r3, [pc, #556]	; (8000c88 <printf+0x32c>)
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a5c:	f802 9c0c 	strb.w	r9, [r2, #-12]
                        i--;
 8000a60:	f10b 3bff 	add.w	fp, fp, #4294967295
                        DecToLong(tol, &flagcnt);
 8000a64:	4798      	blx	r3
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 8000a66:	f10b 0b01 	add.w	fp, fp, #1
 8000a6a:	ab08      	add	r3, sp, #32
 8000a6c:	445b      	add	r3, fp
 8000a6e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a72:	b10b      	cbz	r3, 8000a78 <printf+0x11c>
                if (c=='x') break;
 8000a74:	2b78      	cmp	r3, #120	; 0x78
 8000a76:	d1d0      	bne.n	8000a1a <printf+0xbe>
 8000a78:	9b01      	ldr	r3, [sp, #4]
 8000a7a:	fa9a f28a 	rev.w	r2, sl
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian�� ����.(big�� ����ϱ� ���� ������ �ٲ�)
 8000a7e:	9200      	str	r2, [sp, #0]
        
        // ���� flag�� ���� ���.
        if (flagcnt){
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 80c7 	beq.w	8000c14 <printf+0x2b8>
                if (flagcnt&0x01){        // flagcnt�� Ȧ�� �϶�, upper�� ����, lower�� ���.
 8000a86:	07da      	lsls	r2, r3, #31
 8000a88:	f140 812c 	bpl.w	8000ce4 <printf+0x388>
                        c = s[(8-(flagcnt+1))/2]; // Ȧ�� �϶� �� ��ġ�� �����ϴ� ���� ���� ���� �ɴϴ�.
 8000a8c:	f1c3 0307 	rsb	r3, r3, #7
 8000a90:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000a94:	aa08      	add	r2, sp, #32
 8000a96:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits�� �����ͼ� ascii code��.
                        lHex = ((c>>0)&0x0f);
 8000a9a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
                        if (lHex!=0) leading_zero=false;
 8000a9e:	f013 030f 	ands.w	r3, r3, #15
 8000aa2:	f000 815a 	beq.w	8000d5a <printf+0x3fe>
                        if (lHex<10) lHex+='0';
 8000aa6:	2b09      	cmp	r3, #9
 8000aa8:	f240 8175 	bls.w	8000d96 <printf+0x43a>
                        else         lHex+='A'-10;
 8000aac:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000ab0:	47b0      	blx	r6
 8000ab2:	f04f 0900 	mov.w	r9, #0
 8000ab6:	e155      	b.n	8000d64 <printf+0x408>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000ab8:	2b30      	cmp	r3, #48	; 0x30
 8000aba:	bf08      	it	eq
 8000abc:	2701      	moveq	r7, #1
 8000abe:	e7d2      	b.n	8000a66 <printf+0x10a>
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
 8000ac0:	4672      	mov	r2, lr
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 8000ac2:	ab08      	add	r3, sp, #32
 8000ac4:	441f      	add	r7, r3
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 8000ac6:	2864      	cmp	r0, #100	; 0x64
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
                                        format[i] = '\0';
 8000ac8:	f04f 0300 	mov.w	r3, #0
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 8000acc:	f807 0c18 	strb.w	r0, [r7, #-24]
                                        format[i] = '\0';
 8000ad0:	f807 3c17 	strb.w	r3, [r7, #-23]
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 8000ad4:	f102 0501 	add.w	r5, r2, #1
 8000ad8:	f47f af71 	bne.w	80009be <printf+0x62>
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 8000adc:	f89d 3008 	ldrb.w	r3, [sp, #8]
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // "%08lx"���� '0', 'l'�� ���� ����.
        long        flagcnt=0;                                        // "%08lx"���� "8"�� ã�Ƽ� long������.
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	9201      	str	r2, [sp, #4]
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 8000ae4:	f108 0a04 	add.w	sl, r8, #4
 8000ae8:	f8d8 b000 	ldr.w	fp, [r8]
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 80c4 	beq.w	8000c7a <printf+0x31e>
                if (c=='d') break;
 8000af2:	2b64      	cmp	r3, #100	; 0x64
 8000af4:	f000 80c1 	beq.w	8000c7a <printf+0x31e>
 8000af8:	4690      	mov	r8, r2
 8000afa:	4617      	mov	r7, r2
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000afc:	4691      	mov	r9, r2


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
 8000afe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000b02:	2a08      	cmp	r2, #8
 8000b04:	d87e      	bhi.n	8000c04 <printf+0x2a8>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000b06:	5de3      	ldrb	r3, [r4, r7]
 8000b08:	19e1      	adds	r1, r4, r7
 8000b0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b0e:	2a09      	cmp	r2, #9
 8000b10:	f200 80dc 	bhi.w	8000ccc <printf+0x370>
 8000b14:	a805      	add	r0, sp, #20
 8000b16:	4686      	mov	lr, r0
 8000b18:	2200      	movs	r2, #0
                                tol[j] = s[i++];
 8000b1a:	f80e 3b01 	strb.w	r3, [lr], #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000b1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                                tol[j] = s[i++];
 8000b22:	3701      	adds	r7, #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000b24:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8000b28:	f1bc 0f09 	cmp.w	ip, #9
 8000b2c:	f102 0201 	add.w	r2, r2, #1
 8000b30:	d9f3      	bls.n	8000b1a <printf+0x1be>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000b32:	ab08      	add	r3, sp, #32
 8000b34:	441a      	add	r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8000b36:	a901      	add	r1, sp, #4
 8000b38:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <printf+0x32c>)
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000b3a:	f802 9c0c 	strb.w	r9, [r2, #-12]
                        i--;
 8000b3e:	3f01      	subs	r7, #1
                        DecToLong(tol, &flagcnt);
 8000b40:	4798      	blx	r3
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 8000b42:	3701      	adds	r7, #1
 8000b44:	ab08      	add	r3, sp, #32
 8000b46:	443b      	add	r3, r7
 8000b48:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b4c:	b10b      	cbz	r3, 8000b52 <printf+0x1f6>
                if (c=='d') break;
 8000b4e:	2b64      	cmp	r3, #100	; 0x64
 8000b50:	d1d5      	bne.n	8000afe <printf+0x1a2>
                else continue;
        }


        // ���� flag�� ���� ���.
        if (flagcnt){
 8000b52:	9801      	ldr	r0, [sp, #4]
 8000b54:	2800      	cmp	r0, #0
 8000b56:	f000 8090 	beq.w	8000c7a <printf+0x31e>
                if (flagcnt>9) flagcnt=9;
 8000b5a:	2809      	cmp	r0, #9
 8000b5c:	f340 80bc 	ble.w	8000cd8 <printf+0x37c>
 8000b60:	2009      	movs	r0, #9
 8000b62:	9001      	str	r0, [sp, #4]
 8000b64:	2206      	movs	r2, #6
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b66:	2107      	movs	r1, #7


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000b68:	230a      	movs	r3, #10
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b6a:	3901      	subs	r1, #1
                retval *= num;
 8000b6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b70:	1c4c      	adds	r4, r1, #1
                retval *= num;
 8000b72:	ea4f 0343 	mov.w	r3, r3, lsl #1
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b76:	d1f8      	bne.n	8000b6a <printf+0x20e>


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000b78:	fb9b f7f3 	sdiv	r7, fp, r3
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b7c:	2802      	cmp	r0, #2


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000b7e:	fb03 b717 	mls	r7, r3, r7, fp
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b82:	f000 8106 	beq.w	8000d92 <printf+0x436>
 8000b86:	4613      	mov	r3, r2


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000b88:	240a      	movs	r4, #10
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b8a:	3b01      	subs	r3, #1
                retval *= num;
 8000b8c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b90:	1c59      	adds	r1, r3, #1
                retval *= num;
 8000b92:	ea4f 0444 	mov.w	r4, r4, lsl #1
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000b96:	d1f8      	bne.n	8000b8a <printf+0x22e>
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // "%08lx"���� '0', 'l'�� ���� ����.
        long        flagcnt=0;                                        // "%08lx"���� "8"�� ã�Ƽ� long������.
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
 8000b98:	4643      	mov	r3, r8
 8000b9a:	f04f 0901 	mov.w	r9, #1
 8000b9e:	46a8      	mov	r8, r5
 8000ba0:	461d      	mov	r5, r3
 8000ba2:	e010      	b.n	8000bc6 <printf+0x26a>
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000ba4:	2c01      	cmp	r4, #1
 8000ba6:	d016      	beq.n	8000bd6 <printf+0x27a>


                        if (leading_zero==true){
 8000ba8:	f1b9 0f00 	cmp.w	r9, #0
 8000bac:	d013      	beq.n	8000bd6 <printf+0x27a>
                                if (flag0)        print_byte('0');
 8000bae:	2030      	movs	r0, #48	; 0x30
 8000bb0:	b905      	cbnz	r5, 8000bb4 <printf+0x258>
                                else                print_byte(' ');
 8000bb2:	2020      	movs	r0, #32
 8000bb4:	47b0      	blx	r6
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <printf+0x330>)
 8000bb8:	fb83 2304 	smull	r2, r3, r3, r4
 8000bbc:	17e4      	asrs	r4, r4, #31
 8000bbe:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000bc2:	2c00      	cmp	r4, #0
 8000bc4:	dd7f      	ble.n	8000cc6 <printf+0x36a>
                        result = remainder/divisor;
 8000bc6:	fb97 f3f4 	sdiv	r3, r7, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000bca:	b2d8      	uxtb	r0, r3
 8000bcc:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000bce:	fb04 7713 	mls	r7, r4, r3, r7


                        if (result!=0 || divisor==1) leading_zero = false;
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0e6      	beq.n	8000ba4 <printf+0x248>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000bd6:	47b0      	blx	r6
 8000bd8:	f04f 0900 	mov.w	r9, #0
 8000bdc:	e7eb      	b.n	8000bb6 <printf+0x25a>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000bde:	47b0      	blx	r6
 8000be0:	e6c5      	b.n	800096e <printf+0x12>
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
                                        break;
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
 8000be2:	f8d8 4000 	ldr.w	r4, [r8]
 8000be6:	f108 0804 	add.w	r8, r8, #4
        }
        return;
}

void PrintString(char *fmt, char *s){
        if (!fmt || !s) return;
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	f43f aebf 	beq.w	800096e <printf+0x12>
        while (*s) print_byte(*s++);
 8000bf0:	7820      	ldrb	r0, [r4, #0]
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	f43f aebb 	beq.w	800096e <printf+0x12>
 8000bf8:	47b0      	blx	r6
 8000bfa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d1fa      	bne.n	8000bf8 <printf+0x29c>
 8000c02:	e6b4      	b.n	800096e <printf+0x12>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000c04:	2b30      	cmp	r3, #48	; 0x30
 8000c06:	bf08      	it	eq
 8000c08:	f04f 0801 	moveq.w	r8, #1
 8000c0c:	e799      	b.n	8000b42 <printf+0x1e6>
 8000c0e:	fa9a f38a 	rev.w	r3, sl
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian�� ����.(big�� ����ϱ� ���� ������ �ٲ�)
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	46e9      	mov	r9, sp
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000c16:	f819 3b01 	ldrb.w	r3, [r9], #1
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000c1a:	2201      	movs	r2, #1
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c1c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c20:	091b      	lsrs	r3, r3, #4
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000c22:	f04f 0700 	mov.w	r7, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c26:	d019      	beq.n	8000c5c <printf+0x300>
                        if (uHex<10) uHex+='0';
 8000c28:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 8000c2a:	bf88      	it	hi
 8000c2c:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c30:	f240 80b7 	bls.w	8000da2 <printf+0x446>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000c34:	47b0      	blx	r6
 8000c36:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c38:	b9b4      	cbnz	r4, 8000c68 <printf+0x30c>
 8000c3a:	2f03      	cmp	r7, #3
 8000c3c:	f000 80b4 	beq.w	8000da8 <printf+0x44c>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80b0 	beq.w	8000da8 <printf+0x44c>
                        }
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 8000c48:	3701      	adds	r7, #1
 8000c4a:	2f04      	cmp	r7, #4
 8000c4c:	f43f ae8f 	beq.w	800096e <printf+0x12>
                        c = s[i];
 8000c50:	f819 3b01 	ldrb.w	r3, [r9], #1
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c54:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	d1e5      	bne.n	8000c28 <printf+0x2cc>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f000 80a0 	beq.w	8000da2 <printf+0x446>
 8000c62:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d0e8      	beq.n	8000c3a <printf+0x2de>
                        if (lHex<10) lHex+='0';
 8000c68:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 8000c6a:	bf88      	it	hi
 8000c6c:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c70:	f240 809a 	bls.w	8000da8 <printf+0x44c>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000c74:	47b0      	blx	r6
 8000c76:	2200      	movs	r2, #0
 8000c78:	e7e6      	b.n	8000c48 <printf+0x2ec>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000c7a:	270a      	movs	r7, #10
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4c04      	ldr	r4, [pc, #16]	; (8000c90 <printf+0x334>)
 8000c80:	e013      	b.n	8000caa <printf+0x34e>
 8000c82:	bf00      	nop
 8000c84:	0800088d 	.word	0x0800088d
 8000c88:	08000911 	.word	0x08000911
 8000c8c:	66666667 	.word	0x66666667
 8000c90:	3b9aca00 	.word	0x3b9aca00
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000c94:	47b0      	blx	r6
 8000c96:	2200      	movs	r2, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 8000c98:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <printf+0x454>)
 8000c9a:	3f01      	subs	r7, #1
 8000c9c:	fb83 1304 	smull	r1, r3, r3, r4
 8000ca0:	ea4f 74e4 	mov.w	r4, r4, asr #31
 8000ca4:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000ca8:	d00e      	beq.n	8000cc8 <printf+0x36c>
                        result = remainder/divisor;
 8000caa:	fb9b f3f4 	sdiv	r3, fp, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000cae:	b2d8      	uxtb	r0, r3
 8000cb0:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000cb2:	fb04 bb13 	mls	fp, r4, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ec      	bne.n	8000c94 <printf+0x338>
 8000cba:	2c01      	cmp	r4, #1
 8000cbc:	d0ea      	beq.n	8000c94 <printf+0x338>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	d0e8      	beq.n	8000c94 <printf+0x338>
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	e7e8      	b.n	8000c98 <printf+0x33c>
 8000cc6:	4645      	mov	r5, r8
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 8000cc8:	46d0      	mov	r8, sl
 8000cca:	e650      	b.n	800096e <printf+0x12>

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000ccc:	2200      	movs	r2, #0
 8000cce:	a805      	add	r0, sp, #20
 8000cd0:	e72f      	b.n	8000b32 <printf+0x1d6>

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	a805      	add	r0, sp, #20
 8000cd6:	e6bd      	b.n	8000a54 <printf+0xf8>
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000cd8:	2801      	cmp	r0, #1
 8000cda:	f1a0 0102 	sub.w	r1, r0, #2
 8000cde:	d04a      	beq.n	8000d76 <printf+0x41a>
 8000ce0:	1ec2      	subs	r2, r0, #3
 8000ce2:	e741      	b.n	8000b68 <printf+0x20c>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000ce4:	f04f 0901 	mov.w	r9, #1
                        flagcnt--;
                }


                // byte������ data�� Hex�� ���.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000ce8:	f1c3 0308 	rsb	r3, r3, #8
 8000cec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000cf0:	ea4f 0a63 	mov.w	sl, r3, asr #1
 8000cf4:	f1ba 0f03 	cmp.w	sl, #3
 8000cf8:	f73f ae39 	bgt.w	800096e <printf+0x12>
 8000cfc:	46ab      	mov	fp, r5
 8000cfe:	44ea      	add	sl, sp
 8000d00:	ac01      	add	r4, sp, #4
                        c = s[i];
 8000d02:	f81a 3b01 	ldrb.w	r3, [sl], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000d06:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	d009      	beq.n	8000d22 <printf+0x3c6>
                        if (uHex<10) uHex+='0';
 8000d0e:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 8000d10:	bf88      	it	hi
 8000d12:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d16:	d941      	bls.n	8000d9c <printf+0x440>
                        // upper 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000d18:	47b0      	blx	r6
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 8000d1a:	b97d      	cbnz	r5, 8000d3c <printf+0x3e0>
                        if (lHex<10) lHex+='0';
 8000d1c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000d20:	e010      	b.n	8000d44 <printf+0x3e8>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits ���.
                        if (leading_zero){
 8000d22:	f1b9 0f00 	cmp.w	r9, #0
 8000d26:	d039      	beq.n	8000d9c <printf+0x440>
                                if (flag0) print_byte('0');
 8000d28:	b187      	cbz	r7, 8000d4c <printf+0x3f0>
 8000d2a:	2030      	movs	r0, #48	; 0x30
 8000d2c:	47b0      	blx	r6
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 8000d2e:	b92d      	cbnz	r5, 8000d3c <printf+0x3e0>
                        else         lHex+='A'-10;


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000d30:	2030      	movs	r0, #48	; 0x30
 8000d32:	47b0      	blx	r6
                        flagcnt--;
                }


                // byte������ data�� Hex�� ���.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d1e4      	bne.n	8000d02 <printf+0x3a6>
 8000d38:	465d      	mov	r5, fp
 8000d3a:	e618      	b.n	800096e <printf+0x12>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000d3c:	2d09      	cmp	r5, #9
 8000d3e:	d9ed      	bls.n	8000d1c <printf+0x3c0>
                        else         lHex+='A'-10;
 8000d40:	f105 0037 	add.w	r0, r5, #55	; 0x37
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000d44:	47b0      	blx	r6
 8000d46:	f04f 0900 	mov.w	r9, #0
 8000d4a:	e7f3      	b.n	8000d34 <printf+0x3d8>


                        // upper 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 8000d4c:	2020      	movs	r0, #32
 8000d4e:	47b0      	blx	r6
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d1f3      	bne.n	8000d3c <printf+0x3e0>


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 8000d54:	2020      	movs	r0, #32
 8000d56:	47b0      	blx	r6
 8000d58:	e7ec      	b.n	8000d34 <printf+0x3d8>
                        else         lHex+='A'-10;


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000d5a:	b13f      	cbz	r7, 8000d6c <printf+0x410>
 8000d5c:	2030      	movs	r0, #48	; 0x30
 8000d5e:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000d60:	f04f 0901 	mov.w	r9, #1
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
                        
                        flagcnt--;
 8000d64:	9b01      	ldr	r3, [sp, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	e7bd      	b.n	8000ce8 <printf+0x38c>


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 8000d6c:	2020      	movs	r0, #32
 8000d6e:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000d70:	f04f 0901 	mov.w	r9, #1
 8000d74:	e7f6      	b.n	8000d64 <printf+0x408>


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <printf+0x454>)
 8000d78:	fb83 370b 	smull	r3, r7, r3, fp
 8000d7c:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8000d80:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
 8000d84:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8000d88:	ebab 0743 	sub.w	r7, fp, r3, lsl #1
 8000d8c:	f06f 0301 	mvn.w	r3, #1
 8000d90:	e6fa      	b.n	8000b88 <printf+0x22c>
        while (*s) print_byte(*s++);
        return;
}

int Power(int num, int cnt){
        long retval=num;
 8000d92:	240a      	movs	r4, #10
 8000d94:	e700      	b.n	8000b98 <printf+0x23c>
                        c = s[(8-(flagcnt+1))/2]; // Ȧ�� �϶� �� ��ġ�� �����ϴ� ���� ���� ���� �ɴϴ�.
                        
                        // lower 4 bits�� �����ͼ� ascii code��.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000d96:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000d9a:	e689      	b.n	8000ab0 <printf+0x154>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000d9c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000da0:	e7ba      	b.n	8000d18 <printf+0x3bc>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000da2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000da6:	e745      	b.n	8000c34 <printf+0x2d8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000da8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000dac:	e762      	b.n	8000c74 <printf+0x318>
 8000dae:	bf00      	nop
 8000db0:	66666667 	.word	0x66666667

08000db4 <Hw_1_second>:
{
    for(;time >0;time--);
}

UTIL_DEF void Hw_1_second()
{
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <Hw_1_second+0x8>)
#include "Util.h"


UTIL_DEF void Hw_second(volatile unsigned int time)
{
    for(;time >0;time--);
 8000db6:	3b01      	subs	r3, #1
 8000db8:	d1fd      	bne.n	8000db6 <Hw_1_second+0x2>
}

UTIL_DEF void Hw_1_second()
{
    Hw_second(8065960);
 8000dba:	4770      	bx	lr
 8000dbc:	007b13a8 	.word	0x007b13a8

08000dc0 <do_test>:

    return true;
}

bool do_test(struct _CMD_TBL *cptr, int argc, char **argv)
{
 8000dc0:	b508      	push	{r3, lr}
    printf("\nThis is test\n");
 8000dc2:	4802      	ldr	r0, [pc, #8]	; (8000dcc <do_test+0xc>)
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <do_test+0x10>)
 8000dc6:	4798      	blx	r3
    return true;
}
 8000dc8:	2001      	movs	r0, #1
 8000dca:	bd08      	pop	{r3, pc}
 8000dcc:	080014f8 	.word	0x080014f8
 8000dd0:	0800095d 	.word	0x0800095d

08000dd4 <do_led>:

bool do_led(struct _CMD_TBL *cptr, int argc, char **argv)
{
 8000dd4:	b538      	push	{r3, r4, r5, lr}
 8000dd6:	460d      	mov	r5, r1
 8000dd8:	4614      	mov	r4, r2
    printf("\nThis is led\n");
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <do_led+0x18>)
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <do_led+0x1c>)
 8000dde:	4798      	blx	r3
    command_led_main(argc, argv);
 8000de0:	4628      	mov	r0, r5
 8000de2:	4621      	mov	r1, r4
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <do_led+0x20>)
 8000de6:	4798      	blx	r3
    return true;
 8000de8:	2001      	movs	r0, #1
 8000dea:	bd38      	pop	{r3, r4, r5, pc}
 8000dec:	08001508 	.word	0x08001508
 8000df0:	0800095d 	.word	0x0800095d
 8000df4:	080010bd 	.word	0x080010bd

08000df8 <get_args.part.0>:
        }

    }
}

int get_args(char *s, char **argv)
 8000df8:	b470      	push	{r4, r5, r6}
        while ((*s == ' ') || (*s == '\t'))
        {
            s++;
        }

        if (*s == '\0')
 8000dfa:	2400      	movs	r4, #0
        if (*s == '\0')
        {
            argv[args] = 0;
            return args;
        }
        *s++='\0';
 8000dfc:	4626      	mov	r6, r4
 8000dfe:	1f0d      	subs	r5, r1, #4
 8000e00:	4602      	mov	r2, r0
    {
        return 0;
    }
     while (args < MAX_ARGS)
    {
        while ((*s == ' ') || (*s == '\t'))
 8000e02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000e06:	2b20      	cmp	r3, #32
 8000e08:	d0fa      	beq.n	8000e00 <get_args.part.0+0x8>
 8000e0a:	2b09      	cmp	r3, #9
 8000e0c:	d0f8      	beq.n	8000e00 <get_args.part.0+0x8>
 8000e0e:	4610      	mov	r0, r2
        {
            s++;
        }

        if (*s == '\0')
 8000e10:	b1ab      	cbz	r3, 8000e3e <get_args.part.0+0x46>
        {
            argv[args] = 0;
            return args;
        }
        argv[args++]=s;
 8000e12:	f845 2f04 	str.w	r2, [r5, #4]!
        while (*s && (*s != ' ') && (*s  != '\t'))
 8000e16:	7813      	ldrb	r3, [r2, #0]
        if (*s == '\0')
        {
            argv[args] = 0;
            return args;
        }
        argv[args++]=s;
 8000e18:	3401      	adds	r4, #1
        while (*s && (*s != ' ') && (*s  != '\t'))
 8000e1a:	b92b      	cbnz	r3, 8000e28 <get_args.part.0+0x30>
 8000e1c:	e00e      	b.n	8000e3c <get_args.part.0+0x44>
 8000e1e:	2b09      	cmp	r3, #9
 8000e20:	d004      	beq.n	8000e2c <get_args.part.0+0x34>
 8000e22:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000e26:	b14b      	cbz	r3, 8000e3c <get_args.part.0+0x44>
 8000e28:	2b20      	cmp	r3, #32
 8000e2a:	d1f8      	bne.n	8000e1e <get_args.part.0+0x26>
    int args = 0;
    if(!s || *s == '\0')
    {
        return 0;
    }
     while (args < MAX_ARGS)
 8000e2c:	2c14      	cmp	r4, #20
        if (*s == '\0')
        {
            argv[args] = 0;
            return args;
        }
        *s++='\0';
 8000e2e:	7006      	strb	r6, [r0, #0]
 8000e30:	f100 0001 	add.w	r0, r0, #1
    int args = 0;
    if(!s || *s == '\0')
    {
        return 0;
    }
     while (args < MAX_ARGS)
 8000e34:	d1e4      	bne.n	8000e00 <get_args.part.0+0x8>
            return args;
        }
        *s++='\0';
    }
    return args;
}
 8000e36:	4620      	mov	r0, r4
 8000e38:	bc70      	pop	{r4, r5, r6}
 8000e3a:	4770      	bx	lr
        {
            s++;
        }
        if (*s == '\0')
        {
            argv[args] = 0;
 8000e3c:	2300      	movs	r3, #0
            return args;
        }
        *s++='\0';
    }
    return args;
}
 8000e3e:	4620      	mov	r0, r4
        {
            s++;
        }
        if (*s == '\0')
        {
            argv[args] = 0;
 8000e40:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
            return args;
        }
        *s++='\0';
    }
    return args;
}
 8000e44:	bc70      	pop	{r4, r5, r6}
 8000e46:	4770      	bx	lr

08000e48 <display_prompt>:
        }
    }
}

void display_prompt(char *prompt)
{
 8000e48:	b508      	push	{r3, lr}
    if(prompt == NULL)
 8000e4a:	b120      	cbz	r0, 8000e56 <display_prompt+0xe>
    {
        printf(">>> ");
    }
    else
    {
        printf("%s\n", prompt);
 8000e4c:	4601      	mov	r1, r0
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <display_prompt+0x18>)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <display_prompt+0x1c>)
 8000e52:	4798      	blx	r3
 8000e54:	bd08      	pop	{r3, pc}

void display_prompt(char *prompt)
{
    if(prompt == NULL)
    {
        printf(">>> ");
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <display_prompt+0x20>)
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <display_prompt+0x18>)
 8000e5a:	4798      	blx	r3
 8000e5c:	bd08      	pop	{r3, pc}
 8000e5e:	bf00      	nop
 8000e60:	0800095d 	.word	0x0800095d
 8000e64:	08001588 	.word	0x08001588
 8000e68:	08001518 	.word	0x08001518

08000e6c <get_command>:
        printf("%s\n", prompt);
    }
}

int get_command(char *cmd, int len, int timeout)
{
 8000e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    char key;
    int i, rd_cnt, rd_max;
    rd_max = len-1;
 8000e70:	1e4f      	subs	r7, r1, #1

    for (rd_cnt = 0, i = 0; rd_cnt < rd_max; )
 8000e72:	2f00      	cmp	r7, #0
 8000e74:	dd23      	ble.n	8000ebe <get_command+0x52>
 8000e76:	2400      	movs	r4, #0
 8000e78:	4681      	mov	r9, r0
 8000e7a:	4625      	mov	r5, r4
 8000e7c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000efc <get_command+0x90>
        }
        else
        {
            cmd[i++] = key;
            rd_cnt++;
            printf("%c", key);
 8000e80:	f8df a070 	ldr.w	sl, [pc, #112]	; 8000ef4 <get_command+0x88>
 8000e84:	e007      	b.n	8000e96 <get_command+0x2a>
                i--;
                rd_cnt--;
                printf("\b \b");
            }
        }
        else if(key == '\0')
 8000e86:	b329      	cbz	r1, 8000ed4 <get_command+0x68>
            printf("\n");
            return cmd_size;
        }
        else
        {
            cmd[i++] = key;
 8000e88:	f809 1005 	strb.w	r1, [r9, r5]
            rd_cnt++;
            printf("%c", key);
 8000e8c:	47d0      	blx	sl
            printf("\n");
            return cmd_size;
        }
        else
        {
            cmd[i++] = key;
 8000e8e:	4635      	mov	r5, r6
            rd_cnt++;
 8000e90:	3401      	adds	r4, #1
{
    char key;
    int i, rd_cnt, rd_max;
    rd_max = len-1;

    for (rd_cnt = 0, i = 0; rd_cnt < rd_max; )
 8000e92:	42a7      	cmp	r7, r4
 8000e94:	dd13      	ble.n	8000ebe <get_command+0x52>
    {
        key = get_byte();
 8000e96:	47c0      	blx	r8
        if((key == '\r') || (key == '\n'))
 8000e98:	280d      	cmp	r0, #13
    int i, rd_cnt, rd_max;
    rd_max = len-1;

    for (rd_cnt = 0, i = 0; rd_cnt < rd_max; )
    {
        key = get_byte();
 8000e9a:	4601      	mov	r1, r0
            printf("\n");
            return cmd_size;
        }
        else
        {
            cmd[i++] = key;
 8000e9c:	f105 0601 	add.w	r6, r5, #1
            rd_cnt++;
            printf("%c", key);
 8000ea0:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <get_command+0x7c>)
    rd_max = len-1;

    for (rd_cnt = 0, i = 0; rd_cnt < rd_max; )
    {
        key = get_byte();
        if((key == '\r') || (key == '\n'))
 8000ea2:	d00e      	beq.n	8000ec2 <get_command+0x56>
 8000ea4:	290a      	cmp	r1, #10
 8000ea6:	d00c      	beq.n	8000ec2 <get_command+0x56>
        {
            cmd[i++] = '\0';
            printf("\n");
            return rd_cnt;
        }
        else if(key == '\b')
 8000ea8:	2908      	cmp	r1, #8
 8000eaa:	d1ec      	bne.n	8000e86 <get_command+0x1a>
        {
            if(i > 0)
            {
                i--;
                rd_cnt--;
                printf("\b \b");
 8000eac:	480f      	ldr	r0, [pc, #60]	; (8000eec <get_command+0x80>)
            printf("\n");
            return rd_cnt;
        }
        else if(key == '\b')
        {
            if(i > 0)
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0ef      	beq.n	8000e92 <get_command+0x26>
            {
                i--;
                rd_cnt--;
 8000eb2:	3c01      	subs	r4, #1
                printf("\b \b");
 8000eb4:	47d0      	blx	sl
{
    char key;
    int i, rd_cnt, rd_max;
    rd_max = len-1;

    for (rd_cnt = 0, i = 0; rd_cnt < rd_max; )
 8000eb6:	42a7      	cmp	r7, r4
        }
        else if(key == '\b')
        {
            if(i > 0)
            {
                i--;
 8000eb8:	f105 35ff 	add.w	r5, r5, #4294967295
{
    char key;
    int i, rd_cnt, rd_max;
    rd_max = len-1;

    for (rd_cnt = 0, i = 0; rd_cnt < rd_max; )
 8000ebc:	dceb      	bgt.n	8000e96 <get_command+0x2a>
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    {
        key = get_byte();
        if((key == '\r') || (key == '\n'))
        {
            cmd[i++] = '\0';
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f809 3005 	strb.w	r3, [r9, r5]
            printf("\n");
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <get_command+0x84>)
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <get_command+0x88>)
 8000ecc:	4798      	blx	r3
            return rd_cnt;
 8000ece:	4620      	mov	r0, r4
 8000ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                printf("\b \b");
            }
        }
        else if(key == '\0')
        {
            cmd[cmd_size] = '\0';
 8000ed4:	4c08      	ldr	r4, [pc, #32]	; (8000ef8 <get_command+0x8c>)
            printf("\n");
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <get_command+0x84>)
                printf("\b \b");
            }
        }
        else if(key == '\0')
        {
            cmd[cmd_size] = '\0';
 8000ed8:	6822      	ldr	r2, [r4, #0]
            printf("\n");
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <get_command+0x88>)
                printf("\b \b");
            }
        }
        else if(key == '\0')
        {
            cmd[cmd_size] = '\0';
 8000edc:	f809 1002 	strb.w	r1, [r9, r2]
            printf("\n");
 8000ee0:	4798      	blx	r3
            return cmd_size;
 8000ee2:	6820      	ldr	r0, [r4, #0]
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	08001524 	.word	0x08001524
 8000eec:	08001520 	.word	0x08001520
 8000ef0:	0800168c 	.word	0x0800168c
 8000ef4:	0800095d 	.word	0x0800095d
 8000ef8:	20000054 	.word	0x20000054
 8000efc:	080008b5 	.word	0x080008b5

08000f00 <do_print_help>:

bool do_print_help(int argc, char **argv)
{
    struct _CMD_TBL *cptr;

    if(argc == 1)
 8000f00:	2801      	cmp	r0, #1
    }
    return args;
}

bool do_print_help(int argc, char **argv)
{
 8000f02:	b538      	push	{r3, r4, r5, lr}
    struct _CMD_TBL *cptr;

    if(argc == 1)
 8000f04:	d005      	beq.n	8000f12 <do_print_help+0x12>
        }
        printf("\n\n");
    }
    else
    {
        printf("\n\t Unknow command : %s\n", argv[0]);
 8000f06:	6809      	ldr	r1, [r1, #0]
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <do_print_help+0x38>)
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <do_print_help+0x3c>)
 8000f0c:	4798      	blx	r3
    }

    return true;
}
 8000f0e:	2001      	movs	r0, #1
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
{
    struct _CMD_TBL *cptr;

    if(argc == 1)
    {
        printf("\nThe following command are supported : \n");
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <do_print_help+0x40>)
 8000f14:	4d09      	ldr	r5, [pc, #36]	; (8000f3c <do_print_help+0x3c>)
        printf("Help : Help for commands. \n");

        for(cptr = cmd_tbl; cptr->cmd; cptr++)
 8000f16:	4c0b      	ldr	r4, [pc, #44]	; (8000f44 <do_print_help+0x44>)
{
    struct _CMD_TBL *cptr;

    if(argc == 1)
    {
        printf("\nThe following command are supported : \n");
 8000f18:	47a8      	blx	r5
        printf("Help : Help for commands. \n");
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <do_print_help+0x48>)
 8000f1c:	47a8      	blx	r5

        for(cptr = cmd_tbl; cptr->cmd; cptr++)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	b133      	cbz	r3, 8000f30 <do_print_help+0x30>
        {
            if(cptr->help_more)
 8000f22:	6920      	ldr	r0, [r4, #16]
 8000f24:	b100      	cbz	r0, 8000f28 <do_print_help+0x28>
            {
                printf(cptr->help_more);
 8000f26:	47a8      	blx	r5
    if(argc == 1)
    {
        printf("\nThe following command are supported : \n");
        printf("Help : Help for commands. \n");

        for(cptr = cmd_tbl; cptr->cmd; cptr++)
 8000f28:	f854 3f14 	ldr.w	r3, [r4, #20]!
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f8      	bne.n	8000f22 <do_print_help+0x22>
            if(cptr->help_more)
            {
                printf(cptr->help_more);
            }
        }
        printf("\n\n");
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <do_print_help+0x4c>)
 8000f32:	47a8      	blx	r5
    {
        printf("\n\t Unknow command : %s\n", argv[0]);
    }

    return true;
}
 8000f34:	2001      	movs	r0, #1
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
 8000f38:	08001574 	.word	0x08001574
 8000f3c:	0800095d 	.word	0x0800095d
 8000f40:	08001528 	.word	0x08001528
 8000f44:	20000014 	.word	0x20000014
 8000f48:	08001554 	.word	0x08001554
 8000f4c:	08001570 	.word	0x08001570

08000f50 <command_main>:
    CMD_TBL_END
};


MENU_COMMAND_DEF void command_main(void)
{
 8000f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f54:	4f24      	ldr	r7, [pc, #144]	; (8000fe8 <command_main+0x98>)
 8000f56:	4e25      	ldr	r6, [pc, #148]	; (8000fec <command_main+0x9c>)
 8000f58:	4d25      	ldr	r5, [pc, #148]	; (8000ff0 <command_main+0xa0>)
 8000f5a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8001018 <command_main+0xc8>
 8000f5e:	4c25      	ldr	r4, [pc, #148]	; (8000ff4 <command_main+0xa4>)
 8000f60:	b095      	sub	sp, #84	; 0x54
    struct _CMD_TBL *cptr = NULL;

    for(;;)
    {
        //프론트를 만든다.
        display_prompt(">>> ");
 8000f62:	4825      	ldr	r0, [pc, #148]	; (8000ff8 <command_main+0xa8>)
 8000f64:	47b8      	blx	r7
        //키 입력을 받는다. 3번째 인자 : 최장 대기 시간
        get_command(cmd, 128, 3600);
 8000f66:	4821      	ldr	r0, [pc, #132]	; (8000fec <command_main+0x9c>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f6e:	47a8      	blx	r5
        //argument를 분류한다. argv는 각가의 인자를 저장하는 포인터 배열로 cmd라는 버퍼에서 인자를 분리해서 argv라는 포인터 배열에 인자를 저장한다.
        if(!cmd || !cmd[0])
 8000f70:	7833      	ldrb	r3, [r6, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f5      	beq.n	8000f62 <command_main+0x12>
 8000f76:	4669      	mov	r1, sp
 8000f78:	481c      	ldr	r0, [pc, #112]	; (8000fec <command_main+0x9c>)
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <command_main+0xac>)
 8000f7c:	4798      	blx	r3
        //argc는 인자의 갯수 return value는 인자의 갯수
        argc = get_args(cmd, argv);
        //들어온 명령을 받아서 처리하는 루틴 
        //cptr = cmdTbl : 포인터에 구조체 배열명(주소)을 대입 
        //cptrt++ : 다음 구조를 가르치는 것
        for(cptr = cmd_tbl; cptr->cmd; cptr++)
 8000f7e:	f8d9 1000 	ldr.w	r1, [r9]
 8000f82:	4680      	mov	r8, r0
 8000f84:	f8df a090 	ldr.w	sl, [pc, #144]	; 8001018 <command_main+0xc8>
 8000f88:	b149      	cbz	r1, 8000f9e <command_main+0x4e>
        {
            //argv[0] : arguement를 분리한 첫번째 인자(키보드로 입력된 명령어)
            //cptr->cmd : 예약된 명령어
            if(!StrCmp(argv[0], cptr->cmd))
 8000f8a:	9800      	ldr	r0, [sp, #0]
 8000f8c:	47a0      	blx	r4
 8000f8e:	b910      	cbnz	r0, 8000f96 <command_main+0x46>
            {
                //입력된 명령어와 예약된 명령어가 같으면 해당 명령어를 호출한다.
                if(cptr->run != 0)
 8000f90:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000f94:	b9eb      	cbnz	r3, 8000fd2 <command_main+0x82>
        //argc는 인자의 갯수 return value는 인자의 갯수
        argc = get_args(cmd, argv);
        //들어온 명령을 받아서 처리하는 루틴 
        //cptr = cmdTbl : 포인터에 구조체 배열명(주소)을 대입 
        //cptrt++ : 다음 구조를 가르치는 것
        for(cptr = cmd_tbl; cptr->cmd; cptr++)
 8000f96:	f85a 1f14 	ldr.w	r1, [sl, #20]!
 8000f9a:	2900      	cmp	r1, #0
 8000f9c:	d1f5      	bne.n	8000f8a <command_main+0x3a>
                    (cptr->run)(cptr, argc, argv);
                    break;
                }
            }
        }
        if(!StrCmp(argv[0], "help") || !StrCmp(argv[0], "?"))
 8000f9e:	9800      	ldr	r0, [sp, #0]
 8000fa0:	4917      	ldr	r1, [pc, #92]	; (8001000 <command_main+0xb0>)
 8000fa2:	f8df b050 	ldr.w	fp, [pc, #80]	; 8000ff4 <command_main+0xa4>
 8000fa6:	47a0      	blx	r4
 8000fa8:	b170      	cbz	r0, 8000fc8 <command_main+0x78>
 8000faa:	9800      	ldr	r0, [sp, #0]
 8000fac:	4915      	ldr	r1, [pc, #84]	; (8001004 <command_main+0xb4>)
 8000fae:	47d8      	blx	fp
 8000fb0:	b150      	cbz	r0, 8000fc8 <command_main+0x78>
        {
            do_print_help(argc, argv);
        }else if((!cptr->cmd))
 8000fb2:	f8da 3000 	ldr.w	r3, [sl]
 8000fb6:	b18b      	cbz	r3, 8000fdc <command_main+0x8c>
        {
            printf("\n\t Unknown Command : %s \n", argv[0]);
        }
        if(!StrCmp(argv[0], "end"))
 8000fb8:	9800      	ldr	r0, [sp, #0]
 8000fba:	4913      	ldr	r1, [pc, #76]	; (8001008 <command_main+0xb8>)
 8000fbc:	47a0      	blx	r4
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	d1cf      	bne.n	8000f62 <command_main+0x12>
        {
            break;
        }
    }
}
 8000fc2:	b015      	add	sp, #84	; 0x54
 8000fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }
            }
        }
        if(!StrCmp(argv[0], "help") || !StrCmp(argv[0], "?"))
        {
            do_print_help(argc, argv);
 8000fc8:	4640      	mov	r0, r8
 8000fca:	4669      	mov	r1, sp
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <command_main+0xbc>)
 8000fce:	4798      	blx	r3
 8000fd0:	e7f2      	b.n	8000fb8 <command_main+0x68>
            if(!StrCmp(argv[0], cptr->cmd))
            {
                //입력된 명령어와 예약된 명령어가 같으면 해당 명령어를 호출한다.
                if(cptr->run != 0)
                {
                    (cptr->run)(cptr, argc, argv);
 8000fd2:	4650      	mov	r0, sl
 8000fd4:	4641      	mov	r1, r8
 8000fd6:	466a      	mov	r2, sp
 8000fd8:	4798      	blx	r3
                    break;
 8000fda:	e7e0      	b.n	8000f9e <command_main+0x4e>
        if(!StrCmp(argv[0], "help") || !StrCmp(argv[0], "?"))
        {
            do_print_help(argc, argv);
        }else if((!cptr->cmd))
        {
            printf("\n\t Unknown Command : %s \n", argv[0]);
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <command_main+0xc0>)
 8000fde:	9900      	ldr	r1, [sp, #0]
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <command_main+0xc4>)
 8000fe2:	4798      	blx	r3
 8000fe4:	e7e8      	b.n	8000fb8 <command_main+0x68>
 8000fe6:	bf00      	nop
 8000fe8:	08000e49 	.word	0x08000e49
 8000fec:	20000058 	.word	0x20000058
 8000ff0:	08000e6d 	.word	0x08000e6d
 8000ff4:	080008cd 	.word	0x080008cd
 8000ff8:	08001518 	.word	0x08001518
 8000ffc:	08000df9 	.word	0x08000df9
 8001000:	0800158c 	.word	0x0800158c
 8001004:	08001594 	.word	0x08001594
 8001008:	080015b4 	.word	0x080015b4
 800100c:	08000f01 	.word	0x08000f01
 8001010:	08001598 	.word	0x08001598
 8001014:	0800095d 	.word	0x0800095d
 8001018:	20000014 	.word	0x20000014

0800101c <command_led_main_menu>:
        }
    }
    return 0;
}
LED_COMMAND_DEF int command_led_main_menu(void)
{
 800101c:	b570      	push	{r4, r5, r6, lr}
    int key;

    printf("\n\n");
 800101e:	4e16      	ldr	r6, [pc, #88]	; (8001078 <command_led_main_menu+0x5c>)
    printf("-------------------------------------------------\n");
 8001020:	4d16      	ldr	r5, [pc, #88]	; (800107c <command_led_main_menu+0x60>)
}
LED_COMMAND_DEF int command_led_main_menu(void)
{
    int key;

    printf("\n\n");
 8001022:	4c17      	ldr	r4, [pc, #92]	; (8001080 <command_led_main_menu+0x64>)
 8001024:	4630      	mov	r0, r6
 8001026:	47a0      	blx	r4
    printf("-------------------------------------------------\n");
 8001028:	4628      	mov	r0, r5
 800102a:	47a0      	blx	r4
    printf("                 LED MAIN MENU\n");
 800102c:	4815      	ldr	r0, [pc, #84]	; (8001084 <command_led_main_menu+0x68>)
 800102e:	47a0      	blx	r4
    printf("-------------------------------------------------\n");
 8001030:	4628      	mov	r0, r5
 8001032:	47a0      	blx	r4
    printf(" 1. Red On                                         \n");
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <command_led_main_menu+0x6c>)
 8001036:	47a0      	blx	r4
    printf(" 2. Red Off                                         \n");
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <command_led_main_menu+0x70>)
 800103a:	47a0      	blx	r4
    printf(" 3. Yellow On                                         \n");
 800103c:	4814      	ldr	r0, [pc, #80]	; (8001090 <command_led_main_menu+0x74>)
 800103e:	47a0      	blx	r4
    printf(" 4. Yellow Off                                         \n");
 8001040:	4814      	ldr	r0, [pc, #80]	; (8001094 <command_led_main_menu+0x78>)
 8001042:	47a0      	blx	r4
    printf(" 5. Blue On                                         \n");
 8001044:	4814      	ldr	r0, [pc, #80]	; (8001098 <command_led_main_menu+0x7c>)
 8001046:	47a0      	blx	r4
    printf(" 6. Blue Off                                         \n");
 8001048:	4814      	ldr	r0, [pc, #80]	; (800109c <command_led_main_menu+0x80>)
 800104a:	47a0      	blx	r4
    printf(" 7. Led Test                                         \n");
 800104c:	4814      	ldr	r0, [pc, #80]	; (80010a0 <command_led_main_menu+0x84>)
 800104e:	47a0      	blx	r4
    printf(" 8. System_Information                                         \n");
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <command_led_main_menu+0x88>)
 8001052:	47a0      	blx	r4
    printf(" 9. Test                                         \n");
 8001054:	4814      	ldr	r0, [pc, #80]	; (80010a8 <command_led_main_menu+0x8c>)
 8001056:	47a0      	blx	r4
    printf(" 0. Test                                         \n");
 8001058:	4814      	ldr	r0, [pc, #80]	; (80010ac <command_led_main_menu+0x90>)
 800105a:	47a0      	blx	r4
    printf("-------------------------------------------------\n");
 800105c:	4628      	mov	r0, r5
 800105e:	47a0      	blx	r4
    printf(" q. LED Menu QUIT\n");
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <command_led_main_menu+0x94>)
 8001062:	47a0      	blx	r4
    printf("-------------------------------------------------\n");
 8001064:	4628      	mov	r0, r5
 8001066:	47a0      	blx	r4
    printf("\n\n");
 8001068:	4630      	mov	r0, r6
 800106a:	47a0      	blx	r4

    printf("SELECT THE COMMAND NUMBER : ");
 800106c:	4811      	ldr	r0, [pc, #68]	; (80010b4 <command_led_main_menu+0x98>)
 800106e:	47a0      	blx	r4
    key=get_byte();
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <command_led_main_menu+0x9c>)
 8001072:	4798      	blx	r3
    
    return key;    
}
 8001074:	bd70      	pop	{r4, r5, r6, pc}
 8001076:	bf00      	nop
 8001078:	08001570 	.word	0x08001570
 800107c:	080015cc 	.word	0x080015cc
 8001080:	0800095d 	.word	0x0800095d
 8001084:	08001600 	.word	0x08001600
 8001088:	08001620 	.word	0x08001620
 800108c:	08001658 	.word	0x08001658
 8001090:	08001690 	.word	0x08001690
 8001094:	080016c8 	.word	0x080016c8
 8001098:	08001704 	.word	0x08001704
 800109c:	0800173c 	.word	0x0800173c
 80010a0:	08001774 	.word	0x08001774
 80010a4:	080017ac 	.word	0x080017ac
 80010a8:	080017f0 	.word	0x080017f0
 80010ac:	08001824 	.word	0x08001824
 80010b0:	08001858 	.word	0x08001858
 80010b4:	0800186c 	.word	0x0800186c
 80010b8:	080008b5 	.word	0x080008b5

080010bc <command_led_main>:

LED_COMMAND_DEF int command_led_main(int argc, char **argv)
{
    int key;

    if(argc > 1)
 80010bc:	2801      	cmp	r0, #1
LED_COMMAND_DEF int command_led_main_menu(void);

static unsigned short flag;

LED_COMMAND_DEF int command_led_main(int argc, char **argv)
{
 80010be:	b570      	push	{r4, r5, r6, lr}
    int key;

    if(argc > 1)
 80010c0:	dd28      	ble.n	8001114 <command_led_main+0x58>
 80010c2:	460c      	mov	r4, r1
    {
        if(!StrCmp(argv[0], "ch1"))
 80010c4:	6808      	ldr	r0, [r1, #0]
 80010c6:	4da2      	ldr	r5, [pc, #648]	; (8001350 <command_led_main+0x294>)
 80010c8:	49a2      	ldr	r1, [pc, #648]	; (8001354 <command_led_main+0x298>)
 80010ca:	47a8      	blx	r5
 80010cc:	b1e8      	cbz	r0, 800110a <command_led_main+0x4e>
        {
            printf("LED command menu ch1\n");
        }
        else if(!StrCmp(argv[1], "ch2"))
 80010ce:	6860      	ldr	r0, [r4, #4]
 80010d0:	49a1      	ldr	r1, [pc, #644]	; (8001358 <command_led_main+0x29c>)
 80010d2:	47a8      	blx	r5
 80010d4:	2800      	cmp	r0, #0
 80010d6:	f000 8100 	beq.w	80012da <command_led_main+0x21e>
        {
            printf("LED command menu ch2\n");
        }
        else if(!StrCmp(argv[1], "on"))
 80010da:	6860      	ldr	r0, [r4, #4]
 80010dc:	499f      	ldr	r1, [pc, #636]	; (800135c <command_led_main+0x2a0>)
 80010de:	47a8      	blx	r5
 80010e0:	2800      	cmp	r0, #0
 80010e2:	f040 80ff 	bne.w	80012e4 <command_led_main+0x228>
        {
            printf("\nON %s\n", argv[1]);
 80010e6:	489e      	ldr	r0, [pc, #632]	; (8001360 <command_led_main+0x2a4>)
 80010e8:	6861      	ldr	r1, [r4, #4]
 80010ea:	4e9e      	ldr	r6, [pc, #632]	; (8001364 <command_led_main+0x2a8>)
 80010ec:	47b0      	blx	r6
            if(!StrCmp(argv[2], "ch1"))
 80010ee:	68a0      	ldr	r0, [r4, #8]
 80010f0:	4998      	ldr	r1, [pc, #608]	; (8001354 <command_led_main+0x298>)
 80010f2:	47a8      	blx	r5
 80010f4:	2800      	cmp	r0, #0
 80010f6:	f000 8126 	beq.w	8001346 <command_led_main+0x28a>
            {
                printf("\non argv[2] : %s ch1\n", argv[2]);
            }
            else if(!StrCmp(argv[2], "ch2"))
 80010fa:	68a0      	ldr	r0, [r4, #8]
 80010fc:	4996      	ldr	r1, [pc, #600]	; (8001358 <command_led_main+0x29c>)
 80010fe:	47a8      	blx	r5
 8001100:	b930      	cbnz	r0, 8001110 <command_led_main+0x54>
            {
                printf("\non argv[2] : %s ch2\n", argv[2]);
 8001102:	68a1      	ldr	r1, [r4, #8]
 8001104:	4898      	ldr	r0, [pc, #608]	; (8001368 <command_led_main+0x2ac>)
 8001106:	47b0      	blx	r6
 8001108:	e002      	b.n	8001110 <command_led_main+0x54>

    if(argc > 1)
    {
        if(!StrCmp(argv[0], "ch1"))
        {
            printf("LED command menu ch1\n");
 800110a:	4898      	ldr	r0, [pc, #608]	; (800136c <command_led_main+0x2b0>)
 800110c:	4b95      	ldr	r3, [pc, #596]	; (8001364 <command_led_main+0x2a8>)
 800110e:	4798      	blx	r3
            case 'q':
                return 0;
        }
    }
    return 0;
}
 8001110:	2000      	movs	r0, #0
 8001112:	bd70      	pop	{r4, r5, r6, pc}
 8001114:	4c96      	ldr	r4, [pc, #600]	; (8001370 <command_led_main+0x2b4>)
                printf("No.j\n");

            break;

            case 'k':
                printf("No.k\n");
 8001116:	4d93      	ldr	r5, [pc, #588]	; (8001364 <command_led_main+0x2a8>)
                printf("\nstate argv[2] : %s ch2\n", argv[2]);
            }
        }
        return 0;
    }
    while((key = command_led_main_menu()) != 0)
 8001118:	47a0      	blx	r4
 800111a:	2800      	cmp	r0, #0
 800111c:	d0f8      	beq.n	8001110 <command_led_main+0x54>
    {
         switch(key)
 800111e:	3830      	subs	r0, #48	; 0x30
 8001120:	2841      	cmp	r0, #65	; 0x41
 8001122:	d8f9      	bhi.n	8001118 <command_led_main+0x5c>
 8001124:	a301      	add	r3, pc, #4	; (adr r3, 800112c <command_led_main+0x70>)
 8001126:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 800112a:	bf00      	nop
 800112c:	080012d1 	.word	0x080012d1
 8001130:	080012c7 	.word	0x080012c7
 8001134:	080012bd 	.word	0x080012bd
 8001138:	080012b3 	.word	0x080012b3
 800113c:	080012a9 	.word	0x080012a9
 8001140:	0800129f 	.word	0x0800129f
 8001144:	08001295 	.word	0x08001295
 8001148:	0800128b 	.word	0x0800128b
 800114c:	08001281 	.word	0x08001281
 8001150:	08001277 	.word	0x08001277
 8001154:	08001119 	.word	0x08001119
 8001158:	08001119 	.word	0x08001119
 800115c:	08001119 	.word	0x08001119
 8001160:	08001119 	.word	0x08001119
 8001164:	08001119 	.word	0x08001119
 8001168:	08001119 	.word	0x08001119
 800116c:	08001119 	.word	0x08001119
 8001170:	08001119 	.word	0x08001119
 8001174:	08001119 	.word	0x08001119
 8001178:	08001119 	.word	0x08001119
 800117c:	08001119 	.word	0x08001119
 8001180:	08001119 	.word	0x08001119
 8001184:	08001119 	.word	0x08001119
 8001188:	08001119 	.word	0x08001119
 800118c:	08001119 	.word	0x08001119
 8001190:	08001119 	.word	0x08001119
 8001194:	08001119 	.word	0x08001119
 8001198:	08001119 	.word	0x08001119
 800119c:	08001119 	.word	0x08001119
 80011a0:	08001119 	.word	0x08001119
 80011a4:	08001119 	.word	0x08001119
 80011a8:	08001119 	.word	0x08001119
 80011ac:	08001119 	.word	0x08001119
 80011b0:	08001119 	.word	0x08001119
 80011b4:	08001119 	.word	0x08001119
 80011b8:	08001119 	.word	0x08001119
 80011bc:	08001119 	.word	0x08001119
 80011c0:	08001119 	.word	0x08001119
 80011c4:	08001119 	.word	0x08001119
 80011c8:	08001119 	.word	0x08001119
 80011cc:	08001119 	.word	0x08001119
 80011d0:	08001119 	.word	0x08001119
 80011d4:	08001119 	.word	0x08001119
 80011d8:	08001119 	.word	0x08001119
 80011dc:	08001119 	.word	0x08001119
 80011e0:	08001119 	.word	0x08001119
 80011e4:	08001119 	.word	0x08001119
 80011e8:	08001119 	.word	0x08001119
 80011ec:	08001119 	.word	0x08001119
 80011f0:	08001271 	.word	0x08001271
 80011f4:	0800126b 	.word	0x0800126b
 80011f8:	08001265 	.word	0x08001265
 80011fc:	0800125f 	.word	0x0800125f
 8001200:	08001259 	.word	0x08001259
 8001204:	08001253 	.word	0x08001253
 8001208:	0800124d 	.word	0x0800124d
 800120c:	08001247 	.word	0x08001247
 8001210:	08001241 	.word	0x08001241
 8001214:	0800123b 	.word	0x0800123b
 8001218:	08001235 	.word	0x08001235
 800121c:	08001119 	.word	0x08001119
 8001220:	08001119 	.word	0x08001119
 8001224:	08001119 	.word	0x08001119
 8001228:	08001119 	.word	0x08001119
 800122c:	08001119 	.word	0x08001119
 8001230:	08001111 	.word	0x08001111
                printf("No.j\n");

            break;

            case 'k':
                printf("No.k\n");
 8001234:	484f      	ldr	r0, [pc, #316]	; (8001374 <command_led_main+0x2b8>)
 8001236:	47a8      	blx	r5

            break;
 8001238:	e76e      	b.n	8001118 <command_led_main+0x5c>
                printf("No.i\n");

            break;

            case 'j':
                printf("No.j\n");
 800123a:	484f      	ldr	r0, [pc, #316]	; (8001378 <command_led_main+0x2bc>)
 800123c:	47a8      	blx	r5

            break;
 800123e:	e76b      	b.n	8001118 <command_led_main+0x5c>
                printf("No.h\n");
       
            break;

            case 'i':
                printf("No.i\n");
 8001240:	484e      	ldr	r0, [pc, #312]	; (800137c <command_led_main+0x2c0>)
 8001242:	47a8      	blx	r5

            break;
 8001244:	e768      	b.n	8001118 <command_led_main+0x5c>
                printf("No.g\n");
     
            break;

            case 'h':
                printf("No.h\n");
 8001246:	484e      	ldr	r0, [pc, #312]	; (8001380 <command_led_main+0x2c4>)
 8001248:	47a8      	blx	r5
       
            break;
 800124a:	e765      	b.n	8001118 <command_led_main+0x5c>
                printf("No.f\n");

            break;

            case 'g':
                printf("No.g\n");
 800124c:	484d      	ldr	r0, [pc, #308]	; (8001384 <command_led_main+0x2c8>)
 800124e:	47a8      	blx	r5
     
            break;
 8001250:	e762      	b.n	8001118 <command_led_main+0x5c>
                printf("No.e\n");
     
            break;

            case 'f':
                printf("No.f\n");
 8001252:	484d      	ldr	r0, [pc, #308]	; (8001388 <command_led_main+0x2cc>)
 8001254:	47a8      	blx	r5

            break;
 8001256:	e75f      	b.n	8001118 <command_led_main+0x5c>
                printf("No.d\n");
        
            break;

            case 'e':
                printf("No.e\n");
 8001258:	484c      	ldr	r0, [pc, #304]	; (800138c <command_led_main+0x2d0>)
 800125a:	47a8      	blx	r5
     
            break;
 800125c:	e75c      	b.n	8001118 <command_led_main+0x5c>
                printf("No.c\n");
            
            break;

            case 'd':
                printf("No.d\n");
 800125e:	484c      	ldr	r0, [pc, #304]	; (8001390 <command_led_main+0x2d4>)
 8001260:	47a8      	blx	r5
        
            break;
 8001262:	e759      	b.n	8001118 <command_led_main+0x5c>
                printf("No.b\n");
              
            break;

            case 'c':
                printf("No.c\n");
 8001264:	484b      	ldr	r0, [pc, #300]	; (8001394 <command_led_main+0x2d8>)
 8001266:	47a8      	blx	r5
            
            break;
 8001268:	e756      	b.n	8001118 <command_led_main+0x5c>
                printf("No.a\n");
            
            break;

            case 'b':
                printf("No.b\n");
 800126a:	484b      	ldr	r0, [pc, #300]	; (8001398 <command_led_main+0x2dc>)
 800126c:	47a8      	blx	r5
              
            break;
 800126e:	e753      	b.n	8001118 <command_led_main+0x5c>
                printf("No.0\n");
                LED_ALL_Off();
            break;

            case 'a':
                printf("No.a\n");
 8001270:	484a      	ldr	r0, [pc, #296]	; (800139c <command_led_main+0x2e0>)
 8001272:	47a8      	blx	r5
            
            break;
 8001274:	e750      	b.n	8001118 <command_led_main+0x5c>
                printf("No.8\n");
                System_Information();
            break;

            case '9':
                printf("No.9\n");
 8001276:	484a      	ldr	r0, [pc, #296]	; (80013a0 <command_led_main+0x2e4>)
 8001278:	47a8      	blx	r5
                LED_ALL_On();
 800127a:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <command_led_main+0x2e8>)
 800127c:	4798      	blx	r3
            break;
 800127e:	e74b      	b.n	8001118 <command_led_main+0x5c>
                printf("No.7\n");
                LED_TEST();
            break;

            case '8':
                printf("No.8\n");
 8001280:	4849      	ldr	r0, [pc, #292]	; (80013a8 <command_led_main+0x2ec>)
 8001282:	47a8      	blx	r5
                System_Information();
 8001284:	4b49      	ldr	r3, [pc, #292]	; (80013ac <command_led_main+0x2f0>)
 8001286:	4798      	blx	r3
            break;
 8001288:	e746      	b.n	8001118 <command_led_main+0x5c>
                printf("No.6\n");
                LED_BLUE_Off();
            break;

            case '7':
                printf("No.7\n");
 800128a:	4849      	ldr	r0, [pc, #292]	; (80013b0 <command_led_main+0x2f4>)
 800128c:	47a8      	blx	r5
                LED_TEST();
 800128e:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <command_led_main+0x2f8>)
 8001290:	4798      	blx	r3
            break;
 8001292:	e741      	b.n	8001118 <command_led_main+0x5c>
                printf("No.5\n");
                LED_BLUE_On();
            break;

            case '6':
                printf("No.6\n");
 8001294:	4848      	ldr	r0, [pc, #288]	; (80013b8 <command_led_main+0x2fc>)
 8001296:	47a8      	blx	r5
                LED_BLUE_Off();
 8001298:	4b48      	ldr	r3, [pc, #288]	; (80013bc <command_led_main+0x300>)
 800129a:	4798      	blx	r3
            break;
 800129c:	e73c      	b.n	8001118 <command_led_main+0x5c>
                printf("No.4\n");
                LED_YELLOW_Off();
            break;
              
            case '5':
                printf("No.5\n");
 800129e:	4848      	ldr	r0, [pc, #288]	; (80013c0 <command_led_main+0x304>)
 80012a0:	47a8      	blx	r5
                LED_BLUE_On();
 80012a2:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <command_led_main+0x308>)
 80012a4:	4798      	blx	r3
            break;
 80012a6:	e737      	b.n	8001118 <command_led_main+0x5c>
                printf("No.3\n");
                LED_YELLOW_On();
            break;

            case '4':
                printf("No.4\n");
 80012a8:	4847      	ldr	r0, [pc, #284]	; (80013c8 <command_led_main+0x30c>)
 80012aa:	47a8      	blx	r5
                LED_YELLOW_Off();
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <command_led_main+0x310>)
 80012ae:	4798      	blx	r3
            break;
 80012b0:	e732      	b.n	8001118 <command_led_main+0x5c>
                printf("No.2\n");
                LED_RED_Off();
            break;
            
            case '3':
                printf("No.3\n");
 80012b2:	4847      	ldr	r0, [pc, #284]	; (80013d0 <command_led_main+0x314>)
 80012b4:	47a8      	blx	r5
                LED_YELLOW_On();
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <command_led_main+0x318>)
 80012b8:	4798      	blx	r3
            break;
 80012ba:	e72d      	b.n	8001118 <command_led_main+0x5c>
                printf("No.1\n");
                LED_RED_On();
            break;

            case '2':
                printf("No.2\n");
 80012bc:	4846      	ldr	r0, [pc, #280]	; (80013d8 <command_led_main+0x31c>)
 80012be:	47a8      	blx	r5
                LED_RED_Off();
 80012c0:	4b46      	ldr	r3, [pc, #280]	; (80013dc <command_led_main+0x320>)
 80012c2:	4798      	blx	r3
            break;
 80012c4:	e728      	b.n	8001118 <command_led_main+0x5c>
    while((key = command_led_main_menu()) != 0)
    {
         switch(key)
        {
            case '1':
                printf("No.1\n");
 80012c6:	4846      	ldr	r0, [pc, #280]	; (80013e0 <command_led_main+0x324>)
 80012c8:	47a8      	blx	r5
                LED_RED_On();
 80012ca:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <command_led_main+0x328>)
 80012cc:	4798      	blx	r3
            break;
 80012ce:	e723      	b.n	8001118 <command_led_main+0x5c>
                printf("No.9\n");
                LED_ALL_On();
            break;

            case '0':
                printf("No.0\n");
 80012d0:	4845      	ldr	r0, [pc, #276]	; (80013e8 <command_led_main+0x32c>)
 80012d2:	47a8      	blx	r5
                LED_ALL_Off();
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <command_led_main+0x330>)
 80012d6:	4798      	blx	r3
            break;
 80012d8:	e71e      	b.n	8001118 <command_led_main+0x5c>
        {
            printf("LED command menu ch1\n");
        }
        else if(!StrCmp(argv[1], "ch2"))
        {
            printf("LED command menu ch2\n");
 80012da:	4845      	ldr	r0, [pc, #276]	; (80013f0 <command_led_main+0x334>)
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <command_led_main+0x2a8>)
 80012de:	4798      	blx	r3
            case 'q':
                return 0;
        }
    }
    return 0;
}
 80012e0:	2000      	movs	r0, #0
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
            else if(!StrCmp(argv[2], "ch2"))
            {
                printf("\non argv[2] : %s ch2\n", argv[2]);
            }
        }
        else if(!StrCmp(argv[1], "off"))
 80012e4:	6860      	ldr	r0, [r4, #4]
 80012e6:	4943      	ldr	r1, [pc, #268]	; (80013f4 <command_led_main+0x338>)
 80012e8:	47a8      	blx	r5
 80012ea:	b1c8      	cbz	r0, 8001320 <command_led_main+0x264>
            else if(!StrCmp(argv[2], "ch2"))
            {
                printf("\noff argv[2] : %s ch2\n", argv[2]);
            }
        }
        else if(!StrCmp(argv[1], "state"))
 80012ec:	6860      	ldr	r0, [r4, #4]
 80012ee:	4942      	ldr	r1, [pc, #264]	; (80013f8 <command_led_main+0x33c>)
 80012f0:	47a8      	blx	r5
 80012f2:	2800      	cmp	r0, #0
 80012f4:	f47f af0c 	bne.w	8001110 <command_led_main+0x54>
        {
                printf("\nSTATE %s\n", argv[1]);
 80012f8:	4840      	ldr	r0, [pc, #256]	; (80013fc <command_led_main+0x340>)
 80012fa:	6861      	ldr	r1, [r4, #4]
 80012fc:	4e19      	ldr	r6, [pc, #100]	; (8001364 <command_led_main+0x2a8>)
 80012fe:	47b0      	blx	r6
            if(!StrCmp(argv[2], "ch1"))
 8001300:	68a0      	ldr	r0, [r4, #8]
 8001302:	4914      	ldr	r1, [pc, #80]	; (8001354 <command_led_main+0x298>)
 8001304:	47a8      	blx	r5
 8001306:	2800      	cmp	r0, #0
 8001308:	f000 8086 	beq.w	8001418 <command_led_main+0x35c>
            {
                printf("\nstate argv[2] : %s ch1\n", argv[2]);
            }
            else if(!StrCmp(argv[2], "ch2"))
 800130c:	68a0      	ldr	r0, [r4, #8]
 800130e:	4912      	ldr	r1, [pc, #72]	; (8001358 <command_led_main+0x29c>)
 8001310:	47a8      	blx	r5
 8001312:	2800      	cmp	r0, #0
 8001314:	f47f aefc 	bne.w	8001110 <command_led_main+0x54>
            {
                printf("\nstate argv[2] : %s ch2\n", argv[2]);
 8001318:	68a1      	ldr	r1, [r4, #8]
 800131a:	4839      	ldr	r0, [pc, #228]	; (8001400 <command_led_main+0x344>)
 800131c:	47b0      	blx	r6
 800131e:	e6f7      	b.n	8001110 <command_led_main+0x54>
                printf("\non argv[2] : %s ch2\n", argv[2]);
            }
        }
        else if(!StrCmp(argv[1], "off"))
        {
            printf("\nOFF %s\n", argv[1]);
 8001320:	4838      	ldr	r0, [pc, #224]	; (8001404 <command_led_main+0x348>)
 8001322:	6861      	ldr	r1, [r4, #4]
 8001324:	4e0f      	ldr	r6, [pc, #60]	; (8001364 <command_led_main+0x2a8>)
 8001326:	47b0      	blx	r6
            if(!StrCmp(argv[2], "ch1"))
 8001328:	68a0      	ldr	r0, [r4, #8]
 800132a:	490a      	ldr	r1, [pc, #40]	; (8001354 <command_led_main+0x298>)
 800132c:	47a8      	blx	r5
 800132e:	2800      	cmp	r0, #0
 8001330:	d06e      	beq.n	8001410 <command_led_main+0x354>
            {
                printf("\noff argv[2] : %s ch1\n", argv[2]);
            }
            else if(!StrCmp(argv[2], "ch2"))
 8001332:	68a0      	ldr	r0, [r4, #8]
 8001334:	4908      	ldr	r1, [pc, #32]	; (8001358 <command_led_main+0x29c>)
 8001336:	47a8      	blx	r5
 8001338:	2800      	cmp	r0, #0
 800133a:	f47f aee9 	bne.w	8001110 <command_led_main+0x54>
            {
                printf("\noff argv[2] : %s ch2\n", argv[2]);
 800133e:	68a1      	ldr	r1, [r4, #8]
 8001340:	4831      	ldr	r0, [pc, #196]	; (8001408 <command_led_main+0x34c>)
 8001342:	47b0      	blx	r6
 8001344:	e6e4      	b.n	8001110 <command_led_main+0x54>
        else if(!StrCmp(argv[1], "on"))
        {
            printf("\nON %s\n", argv[1]);
            if(!StrCmp(argv[2], "ch1"))
            {
                printf("\non argv[2] : %s ch1\n", argv[2]);
 8001346:	68a1      	ldr	r1, [r4, #8]
 8001348:	4830      	ldr	r0, [pc, #192]	; (800140c <command_led_main+0x350>)
 800134a:	47b0      	blx	r6
 800134c:	e6e0      	b.n	8001110 <command_led_main+0x54>
 800134e:	bf00      	nop
 8001350:	080008cd 	.word	0x080008cd
 8001354:	0800188c 	.word	0x0800188c
 8001358:	080018a8 	.word	0x080018a8
 800135c:	080018c4 	.word	0x080018c4
 8001360:	080018c8 	.word	0x080018c8
 8001364:	0800095d 	.word	0x0800095d
 8001368:	080018e8 	.word	0x080018e8
 800136c:	08001890 	.word	0x08001890
 8001370:	0800101d 	.word	0x0800101d
 8001374:	08001a2c 	.word	0x08001a2c
 8001378:	08001a24 	.word	0x08001a24
 800137c:	08001a1c 	.word	0x08001a1c
 8001380:	08001a14 	.word	0x08001a14
 8001384:	08001a0c 	.word	0x08001a0c
 8001388:	08001a04 	.word	0x08001a04
 800138c:	080019fc 	.word	0x080019fc
 8001390:	080019f4 	.word	0x080019f4
 8001394:	080019ec 	.word	0x080019ec
 8001398:	080019e4 	.word	0x080019e4
 800139c:	080019dc 	.word	0x080019dc
 80013a0:	080019cc 	.word	0x080019cc
 80013a4:	080007b5 	.word	0x080007b5
 80013a8:	080019c4 	.word	0x080019c4
 80013ac:	08001465 	.word	0x08001465
 80013b0:	080019bc 	.word	0x080019bc
 80013b4:	0800085d 	.word	0x0800085d
 80013b8:	080019b4 	.word	0x080019b4
 80013bc:	080007a5 	.word	0x080007a5
 80013c0:	080019ac 	.word	0x080019ac
 80013c4:	08000795 	.word	0x08000795
 80013c8:	080019a4 	.word	0x080019a4
 80013cc:	08000785 	.word	0x08000785
 80013d0:	0800199c 	.word	0x0800199c
 80013d4:	08000775 	.word	0x08000775
 80013d8:	08001994 	.word	0x08001994
 80013dc:	08000765 	.word	0x08000765
 80013e0:	0800198c 	.word	0x0800198c
 80013e4:	08000755 	.word	0x08000755
 80013e8:	080019d4 	.word	0x080019d4
 80013ec:	080007d5 	.word	0x080007d5
 80013f0:	080018ac 	.word	0x080018ac
 80013f4:	08001900 	.word	0x08001900
 80013f8:	08001940 	.word	0x08001940
 80013fc:	08001948 	.word	0x08001948
 8001400:	08001970 	.word	0x08001970
 8001404:	08001904 	.word	0x08001904
 8001408:	08001928 	.word	0x08001928
 800140c:	080018d0 	.word	0x080018d0
        else if(!StrCmp(argv[1], "off"))
        {
            printf("\nOFF %s\n", argv[1]);
            if(!StrCmp(argv[2], "ch1"))
            {
                printf("\noff argv[2] : %s ch1\n", argv[2]);
 8001410:	68a1      	ldr	r1, [r4, #8]
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <command_led_main+0x364>)
 8001414:	47b0      	blx	r6
 8001416:	e67b      	b.n	8001110 <command_led_main+0x54>
        else if(!StrCmp(argv[1], "state"))
        {
                printf("\nSTATE %s\n", argv[1]);
            if(!StrCmp(argv[2], "ch1"))
            {
                printf("\nstate argv[2] : %s ch1\n", argv[2]);
 8001418:	68a1      	ldr	r1, [r4, #8]
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <command_led_main+0x368>)
 800141c:	47b0      	blx	r6
 800141e:	e677      	b.n	8001110 <command_led_main+0x54>
 8001420:	08001910 	.word	0x08001910
 8001424:	08001954 	.word	0x08001954

08001428 <main>:
#include "main.h"

int main()
{
 8001428:	b508      	push	{r3, lr}
    Hw_Init();
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <main+0x20>)
 800142c:	4798      	blx	r3
    NVIC_Configuration();
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <main+0x24>)
 8001430:	4798      	blx	r3
    EXTI_Configuration();
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <main+0x28>)
 8001434:	4798      	blx	r3
    System_Information();
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <main+0x2c>)
 8001438:	4798      	blx	r3
    printf("testing!\n");
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <main+0x30>)
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <main+0x34>)
 800143e:	4798      	blx	r3
    command_main();
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <main+0x38>)
 8001442:	4798      	blx	r3
    
 8001444:	2000      	movs	r0, #0
 8001446:	bd08      	pop	{r3, pc}
 8001448:	08000171 	.word	0x08000171
 800144c:	080005dd 	.word	0x080005dd
 8001450:	080006f1 	.word	0x080006f1
 8001454:	08001465 	.word	0x08001465
 8001458:	08001a34 	.word	0x08001a34
 800145c:	0800095d 	.word	0x0800095d
 8001460:	08000f51 	.word	0x08000f51

08001464 <System_Information>:


GET_SYSCLOCK_DEF void System_Information(void);

GET_SYSCLOCK_DEF void System_Information(void)
{
 8001464:	b510      	push	{r4, lr}

    RCC_ClocksTypeDef  rcc_clocks;
    printf("StartUpCounter : %d\n", StartUpCounter);
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <System_Information+0x38>)


GET_SYSCLOCK_DEF void System_Information(void);

GET_SYSCLOCK_DEF void System_Information(void)
{
 8001468:	b086      	sub	sp, #24

    RCC_ClocksTypeDef  rcc_clocks;
    printf("StartUpCounter : %d\n", StartUpCounter);
 800146a:	4c0d      	ldr	r4, [pc, #52]	; (80014a0 <System_Information+0x3c>)
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <System_Information+0x40>)
 8001470:	47a0      	blx	r4
    RCC_GetClocksFreq(&rcc_clocks);
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <System_Information+0x44>)
 8001474:	a801      	add	r0, sp, #4
 8001476:	4798      	blx	r3
    printf("SYSCLK_Frequency = %d\n",rcc_clocks.SYSCLK_Frequency );
 8001478:	9901      	ldr	r1, [sp, #4]
 800147a:	480c      	ldr	r0, [pc, #48]	; (80014ac <System_Information+0x48>)
 800147c:	47a0      	blx	r4
    printf("HCLK_Frequency = %d\n",rcc_clocks.HCLK_Frequency );
 800147e:	9902      	ldr	r1, [sp, #8]
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <System_Information+0x4c>)
 8001482:	47a0      	blx	r4
    printf("PCLK1_Frequency = %d\n",rcc_clocks.PCLK1_Frequency );
 8001484:	9903      	ldr	r1, [sp, #12]
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <System_Information+0x50>)
 8001488:	47a0      	blx	r4
    printf("PCLK2_Frequency = %d\n",rcc_clocks.PCLK2_Frequency );
 800148a:	9904      	ldr	r1, [sp, #16]
 800148c:	480a      	ldr	r0, [pc, #40]	; (80014b8 <System_Information+0x54>)
 800148e:	47a0      	blx	r4
    printf("ADCCLK_Frequency = %d\n",rcc_clocks.ADCCLK_Frequency );
 8001490:	480a      	ldr	r0, [pc, #40]	; (80014bc <System_Information+0x58>)
 8001492:	9905      	ldr	r1, [sp, #20]
 8001494:	47a0      	blx	r4
 8001496:	b006      	add	sp, #24
 8001498:	bd10      	pop	{r4, pc}
 800149a:	bf00      	nop
 800149c:	20000050 	.word	0x20000050
 80014a0:	0800095d 	.word	0x0800095d
 80014a4:	08001a40 	.word	0x08001a40
 80014a8:	08000261 	.word	0x08000261
 80014ac:	08001a58 	.word	0x08001a58
 80014b0:	08001a70 	.word	0x08001a70
 80014b4:	08001a88 	.word	0x08001a88
 80014b8:	08001aa0 	.word	0x08001aa0
 80014bc:	08001ab8 	.word	0x08001ab8
 80014c0:	5446454c 	.word	0x5446454c
 80014c4:	554b572d 	.word	0x554b572d
 80014c8:	75422050 	.word	0x75422050
 80014cc:	6e6f7474 	.word	0x6e6f7474
 80014d0:	65725020 	.word	0x65725020
 80014d4:	21217373 	.word	0x21217373
 80014d8:	0000000a 	.word	0x0000000a
 80014dc:	48474952 	.word	0x48474952
 80014e0:	4b572d54 	.word	0x4b572d54
 80014e4:	42205055 	.word	0x42205055
 80014e8:	6f747475 	.word	0x6f747475
 80014ec:	7250206e 	.word	0x7250206e
 80014f0:	21737365 	.word	0x21737365
 80014f4:	00000a21 	.word	0x00000a21
 80014f8:	6968540a 	.word	0x6968540a
 80014fc:	73692073 	.word	0x73692073
 8001500:	73657420 	.word	0x73657420
 8001504:	00000a74 	.word	0x00000a74
 8001508:	6968540a 	.word	0x6968540a
 800150c:	73692073 	.word	0x73692073
 8001510:	64656c20 	.word	0x64656c20
 8001514:	0000000a 	.word	0x0000000a
 8001518:	203e3e3e 	.word	0x203e3e3e
 800151c:	00000000 	.word	0x00000000
 8001520:	00082008 	.word	0x00082008
 8001524:	00006325 	.word	0x00006325
 8001528:	6568540a 	.word	0x6568540a
 800152c:	6c6f6620 	.word	0x6c6f6620
 8001530:	69776f6c 	.word	0x69776f6c
 8001534:	6320676e 	.word	0x6320676e
 8001538:	616d6d6f 	.word	0x616d6d6f
 800153c:	6120646e 	.word	0x6120646e
 8001540:	73206572 	.word	0x73206572
 8001544:	6f707075 	.word	0x6f707075
 8001548:	64657472 	.word	0x64657472
 800154c:	0a203a20 	.word	0x0a203a20
 8001550:	00000000 	.word	0x00000000
 8001554:	706c6548 	.word	0x706c6548
 8001558:	48203a20 	.word	0x48203a20
 800155c:	20706c65 	.word	0x20706c65
 8001560:	20726f66 	.word	0x20726f66
 8001564:	6d6d6f63 	.word	0x6d6d6f63
 8001568:	73646e61 	.word	0x73646e61
 800156c:	000a202e 	.word	0x000a202e
 8001570:	00000a0a 	.word	0x00000a0a
 8001574:	5520090a 	.word	0x5520090a
 8001578:	6f6e6b6e 	.word	0x6f6e6b6e
 800157c:	6f632077 	.word	0x6f632077
 8001580:	6e616d6d 	.word	0x6e616d6d
 8001584:	203a2064 	.word	0x203a2064
 8001588:	000a7325 	.word	0x000a7325
 800158c:	706c6568 	.word	0x706c6568
 8001590:	00000000 	.word	0x00000000
 8001594:	0000003f 	.word	0x0000003f
 8001598:	5520090a 	.word	0x5520090a
 800159c:	6f6e6b6e 	.word	0x6f6e6b6e
 80015a0:	43206e77 	.word	0x43206e77
 80015a4:	616d6d6f 	.word	0x616d6d6f
 80015a8:	3a20646e 	.word	0x3a20646e
 80015ac:	20732520 	.word	0x20732520
 80015b0:	0000000a 	.word	0x0000000a
 80015b4:	00646e65 	.word	0x00646e65
 80015b8:	74736574 	.word	0x74736574
 80015bc:	00000000 	.word	0x00000000
 80015c0:	5f64656c 	.word	0x5f64656c
 80015c4:	756e656d 	.word	0x756e656d
 80015c8:	00000000 	.word	0x00000000
 80015cc:	2d2d2d2d 	.word	0x2d2d2d2d
 80015d0:	2d2d2d2d 	.word	0x2d2d2d2d
 80015d4:	2d2d2d2d 	.word	0x2d2d2d2d
 80015d8:	2d2d2d2d 	.word	0x2d2d2d2d
 80015dc:	2d2d2d2d 	.word	0x2d2d2d2d
 80015e0:	2d2d2d2d 	.word	0x2d2d2d2d
 80015e4:	2d2d2d2d 	.word	0x2d2d2d2d
 80015e8:	2d2d2d2d 	.word	0x2d2d2d2d
 80015ec:	2d2d2d2d 	.word	0x2d2d2d2d
 80015f0:	2d2d2d2d 	.word	0x2d2d2d2d
 80015f4:	2d2d2d2d 	.word	0x2d2d2d2d
 80015f8:	2d2d2d2d 	.word	0x2d2d2d2d
 80015fc:	00000a2d 	.word	0x00000a2d
 8001600:	20202020 	.word	0x20202020
 8001604:	20202020 	.word	0x20202020
 8001608:	20202020 	.word	0x20202020
 800160c:	20202020 	.word	0x20202020
 8001610:	44454c20 	.word	0x44454c20
 8001614:	49414d20 	.word	0x49414d20
 8001618:	454d204e 	.word	0x454d204e
 800161c:	000a554e 	.word	0x000a554e
 8001620:	202e3120 	.word	0x202e3120
 8001624:	20646552 	.word	0x20646552
 8001628:	20206e4f 	.word	0x20206e4f
 800162c:	20202020 	.word	0x20202020
 8001630:	20202020 	.word	0x20202020
 8001634:	20202020 	.word	0x20202020
 8001638:	20202020 	.word	0x20202020
 800163c:	20202020 	.word	0x20202020
 8001640:	20202020 	.word	0x20202020
 8001644:	20202020 	.word	0x20202020
 8001648:	20202020 	.word	0x20202020
 800164c:	20202020 	.word	0x20202020
 8001650:	0a202020 	.word	0x0a202020
 8001654:	00000000 	.word	0x00000000
 8001658:	202e3220 	.word	0x202e3220
 800165c:	20646552 	.word	0x20646552
 8001660:	2066664f 	.word	0x2066664f
 8001664:	20202020 	.word	0x20202020
 8001668:	20202020 	.word	0x20202020
 800166c:	20202020 	.word	0x20202020
 8001670:	20202020 	.word	0x20202020
 8001674:	20202020 	.word	0x20202020
 8001678:	20202020 	.word	0x20202020
 800167c:	20202020 	.word	0x20202020
 8001680:	20202020 	.word	0x20202020
 8001684:	20202020 	.word	0x20202020
 8001688:	20202020 	.word	0x20202020
 800168c:	0000000a 	.word	0x0000000a
 8001690:	202e3320 	.word	0x202e3320
 8001694:	6c6c6559 	.word	0x6c6c6559
 8001698:	4f20776f 	.word	0x4f20776f
 800169c:	2020206e 	.word	0x2020206e
 80016a0:	20202020 	.word	0x20202020
 80016a4:	20202020 	.word	0x20202020
 80016a8:	20202020 	.word	0x20202020
 80016ac:	20202020 	.word	0x20202020
 80016b0:	20202020 	.word	0x20202020
 80016b4:	20202020 	.word	0x20202020
 80016b8:	20202020 	.word	0x20202020
 80016bc:	20202020 	.word	0x20202020
 80016c0:	20202020 	.word	0x20202020
 80016c4:	000a2020 	.word	0x000a2020
 80016c8:	202e3420 	.word	0x202e3420
 80016cc:	6c6c6559 	.word	0x6c6c6559
 80016d0:	4f20776f 	.word	0x4f20776f
 80016d4:	20206666 	.word	0x20206666
 80016d8:	20202020 	.word	0x20202020
 80016dc:	20202020 	.word	0x20202020
 80016e0:	20202020 	.word	0x20202020
 80016e4:	20202020 	.word	0x20202020
 80016e8:	20202020 	.word	0x20202020
 80016ec:	20202020 	.word	0x20202020
 80016f0:	20202020 	.word	0x20202020
 80016f4:	20202020 	.word	0x20202020
 80016f8:	20202020 	.word	0x20202020
 80016fc:	0a202020 	.word	0x0a202020
 8001700:	00000000 	.word	0x00000000
 8001704:	202e3520 	.word	0x202e3520
 8001708:	65756c42 	.word	0x65756c42
 800170c:	206e4f20 	.word	0x206e4f20
 8001710:	20202020 	.word	0x20202020
 8001714:	20202020 	.word	0x20202020
 8001718:	20202020 	.word	0x20202020
 800171c:	20202020 	.word	0x20202020
 8001720:	20202020 	.word	0x20202020
 8001724:	20202020 	.word	0x20202020
 8001728:	20202020 	.word	0x20202020
 800172c:	20202020 	.word	0x20202020
 8001730:	20202020 	.word	0x20202020
 8001734:	20202020 	.word	0x20202020
 8001738:	0000000a 	.word	0x0000000a
 800173c:	202e3620 	.word	0x202e3620
 8001740:	65756c42 	.word	0x65756c42
 8001744:	66664f20 	.word	0x66664f20
 8001748:	20202020 	.word	0x20202020
 800174c:	20202020 	.word	0x20202020
 8001750:	20202020 	.word	0x20202020
 8001754:	20202020 	.word	0x20202020
 8001758:	20202020 	.word	0x20202020
 800175c:	20202020 	.word	0x20202020
 8001760:	20202020 	.word	0x20202020
 8001764:	20202020 	.word	0x20202020
 8001768:	20202020 	.word	0x20202020
 800176c:	20202020 	.word	0x20202020
 8001770:	00000a20 	.word	0x00000a20
 8001774:	202e3720 	.word	0x202e3720
 8001778:	2064654c 	.word	0x2064654c
 800177c:	74736554 	.word	0x74736554
 8001780:	20202020 	.word	0x20202020
 8001784:	20202020 	.word	0x20202020
 8001788:	20202020 	.word	0x20202020
 800178c:	20202020 	.word	0x20202020
 8001790:	20202020 	.word	0x20202020
 8001794:	20202020 	.word	0x20202020
 8001798:	20202020 	.word	0x20202020
 800179c:	20202020 	.word	0x20202020
 80017a0:	20202020 	.word	0x20202020
 80017a4:	20202020 	.word	0x20202020
 80017a8:	00000a20 	.word	0x00000a20
 80017ac:	202e3820 	.word	0x202e3820
 80017b0:	74737953 	.word	0x74737953
 80017b4:	495f6d65 	.word	0x495f6d65
 80017b8:	726f666e 	.word	0x726f666e
 80017bc:	6974616d 	.word	0x6974616d
 80017c0:	20206e6f 	.word	0x20206e6f
 80017c4:	20202020 	.word	0x20202020
 80017c8:	20202020 	.word	0x20202020
 80017cc:	20202020 	.word	0x20202020
 80017d0:	20202020 	.word	0x20202020
 80017d4:	20202020 	.word	0x20202020
 80017d8:	20202020 	.word	0x20202020
 80017dc:	20202020 	.word	0x20202020
 80017e0:	20202020 	.word	0x20202020
 80017e4:	20202020 	.word	0x20202020
 80017e8:	0a202020 	.word	0x0a202020
 80017ec:	00000000 	.word	0x00000000
 80017f0:	202e3920 	.word	0x202e3920
 80017f4:	74736554 	.word	0x74736554
 80017f8:	20202020 	.word	0x20202020
 80017fc:	20202020 	.word	0x20202020
 8001800:	20202020 	.word	0x20202020
 8001804:	20202020 	.word	0x20202020
 8001808:	20202020 	.word	0x20202020
 800180c:	20202020 	.word	0x20202020
 8001810:	20202020 	.word	0x20202020
 8001814:	20202020 	.word	0x20202020
 8001818:	20202020 	.word	0x20202020
 800181c:	20202020 	.word	0x20202020
 8001820:	00000a20 	.word	0x00000a20
 8001824:	202e3020 	.word	0x202e3020
 8001828:	74736554 	.word	0x74736554
 800182c:	20202020 	.word	0x20202020
 8001830:	20202020 	.word	0x20202020
 8001834:	20202020 	.word	0x20202020
 8001838:	20202020 	.word	0x20202020
 800183c:	20202020 	.word	0x20202020
 8001840:	20202020 	.word	0x20202020
 8001844:	20202020 	.word	0x20202020
 8001848:	20202020 	.word	0x20202020
 800184c:	20202020 	.word	0x20202020
 8001850:	20202020 	.word	0x20202020
 8001854:	00000a20 	.word	0x00000a20
 8001858:	202e7120 	.word	0x202e7120
 800185c:	2044454c 	.word	0x2044454c
 8001860:	756e654d 	.word	0x756e654d
 8001864:	49555120 	.word	0x49555120
 8001868:	00000a54 	.word	0x00000a54
 800186c:	454c4553 	.word	0x454c4553
 8001870:	54205443 	.word	0x54205443
 8001874:	43204548 	.word	0x43204548
 8001878:	414d4d4f 	.word	0x414d4d4f
 800187c:	4e20444e 	.word	0x4e20444e
 8001880:	45424d55 	.word	0x45424d55
 8001884:	203a2052 	.word	0x203a2052
 8001888:	00000000 	.word	0x00000000
 800188c:	00316863 	.word	0x00316863
 8001890:	2044454c 	.word	0x2044454c
 8001894:	6d6d6f63 	.word	0x6d6d6f63
 8001898:	20646e61 	.word	0x20646e61
 800189c:	756e656d 	.word	0x756e656d
 80018a0:	31686320 	.word	0x31686320
 80018a4:	0000000a 	.word	0x0000000a
 80018a8:	00326863 	.word	0x00326863
 80018ac:	2044454c 	.word	0x2044454c
 80018b0:	6d6d6f63 	.word	0x6d6d6f63
 80018b4:	20646e61 	.word	0x20646e61
 80018b8:	756e656d 	.word	0x756e656d
 80018bc:	32686320 	.word	0x32686320
 80018c0:	0000000a 	.word	0x0000000a
 80018c4:	00006e6f 	.word	0x00006e6f
 80018c8:	204e4f0a 	.word	0x204e4f0a
 80018cc:	000a7325 	.word	0x000a7325
 80018d0:	206e6f0a 	.word	0x206e6f0a
 80018d4:	76677261 	.word	0x76677261
 80018d8:	205d325b 	.word	0x205d325b
 80018dc:	7325203a 	.word	0x7325203a
 80018e0:	31686320 	.word	0x31686320
 80018e4:	0000000a 	.word	0x0000000a
 80018e8:	206e6f0a 	.word	0x206e6f0a
 80018ec:	76677261 	.word	0x76677261
 80018f0:	205d325b 	.word	0x205d325b
 80018f4:	7325203a 	.word	0x7325203a
 80018f8:	32686320 	.word	0x32686320
 80018fc:	0000000a 	.word	0x0000000a
 8001900:	0066666f 	.word	0x0066666f
 8001904:	46464f0a 	.word	0x46464f0a
 8001908:	0a732520 	.word	0x0a732520
 800190c:	00000000 	.word	0x00000000
 8001910:	66666f0a 	.word	0x66666f0a
 8001914:	67726120 	.word	0x67726120
 8001918:	5d325b76 	.word	0x5d325b76
 800191c:	25203a20 	.word	0x25203a20
 8001920:	68632073 	.word	0x68632073
 8001924:	00000a31 	.word	0x00000a31
 8001928:	66666f0a 	.word	0x66666f0a
 800192c:	67726120 	.word	0x67726120
 8001930:	5d325b76 	.word	0x5d325b76
 8001934:	25203a20 	.word	0x25203a20
 8001938:	68632073 	.word	0x68632073
 800193c:	00000a32 	.word	0x00000a32
 8001940:	74617473 	.word	0x74617473
 8001944:	00000065 	.word	0x00000065
 8001948:	4154530a 	.word	0x4154530a
 800194c:	25204554 	.word	0x25204554
 8001950:	00000a73 	.word	0x00000a73
 8001954:	6174730a 	.word	0x6174730a
 8001958:	61206574 	.word	0x61206574
 800195c:	5b766772 	.word	0x5b766772
 8001960:	3a205d32 	.word	0x3a205d32
 8001964:	20732520 	.word	0x20732520
 8001968:	0a316863 	.word	0x0a316863
 800196c:	00000000 	.word	0x00000000
 8001970:	6174730a 	.word	0x6174730a
 8001974:	61206574 	.word	0x61206574
 8001978:	5b766772 	.word	0x5b766772
 800197c:	3a205d32 	.word	0x3a205d32
 8001980:	20732520 	.word	0x20732520
 8001984:	0a326863 	.word	0x0a326863
 8001988:	00000000 	.word	0x00000000
 800198c:	312e6f4e 	.word	0x312e6f4e
 8001990:	0000000a 	.word	0x0000000a
 8001994:	322e6f4e 	.word	0x322e6f4e
 8001998:	0000000a 	.word	0x0000000a
 800199c:	332e6f4e 	.word	0x332e6f4e
 80019a0:	0000000a 	.word	0x0000000a
 80019a4:	342e6f4e 	.word	0x342e6f4e
 80019a8:	0000000a 	.word	0x0000000a
 80019ac:	352e6f4e 	.word	0x352e6f4e
 80019b0:	0000000a 	.word	0x0000000a
 80019b4:	362e6f4e 	.word	0x362e6f4e
 80019b8:	0000000a 	.word	0x0000000a
 80019bc:	372e6f4e 	.word	0x372e6f4e
 80019c0:	0000000a 	.word	0x0000000a
 80019c4:	382e6f4e 	.word	0x382e6f4e
 80019c8:	0000000a 	.word	0x0000000a
 80019cc:	392e6f4e 	.word	0x392e6f4e
 80019d0:	0000000a 	.word	0x0000000a
 80019d4:	302e6f4e 	.word	0x302e6f4e
 80019d8:	0000000a 	.word	0x0000000a
 80019dc:	612e6f4e 	.word	0x612e6f4e
 80019e0:	0000000a 	.word	0x0000000a
 80019e4:	622e6f4e 	.word	0x622e6f4e
 80019e8:	0000000a 	.word	0x0000000a
 80019ec:	632e6f4e 	.word	0x632e6f4e
 80019f0:	0000000a 	.word	0x0000000a
 80019f4:	642e6f4e 	.word	0x642e6f4e
 80019f8:	0000000a 	.word	0x0000000a
 80019fc:	652e6f4e 	.word	0x652e6f4e
 8001a00:	0000000a 	.word	0x0000000a
 8001a04:	662e6f4e 	.word	0x662e6f4e
 8001a08:	0000000a 	.word	0x0000000a
 8001a0c:	672e6f4e 	.word	0x672e6f4e
 8001a10:	0000000a 	.word	0x0000000a
 8001a14:	682e6f4e 	.word	0x682e6f4e
 8001a18:	0000000a 	.word	0x0000000a
 8001a1c:	692e6f4e 	.word	0x692e6f4e
 8001a20:	0000000a 	.word	0x0000000a
 8001a24:	6a2e6f4e 	.word	0x6a2e6f4e
 8001a28:	0000000a 	.word	0x0000000a
 8001a2c:	6b2e6f4e 	.word	0x6b2e6f4e
 8001a30:	0000000a 	.word	0x0000000a
 8001a34:	74736574 	.word	0x74736574
 8001a38:	21676e69 	.word	0x21676e69
 8001a3c:	0000000a 	.word	0x0000000a
 8001a40:	72617453 	.word	0x72617453
 8001a44:	43705574 	.word	0x43705574
 8001a48:	746e756f 	.word	0x746e756f
 8001a4c:	3a207265 	.word	0x3a207265
 8001a50:	0a642520 	.word	0x0a642520
 8001a54:	00000000 	.word	0x00000000
 8001a58:	43535953 	.word	0x43535953
 8001a5c:	465f4b4c 	.word	0x465f4b4c
 8001a60:	75716572 	.word	0x75716572
 8001a64:	79636e65 	.word	0x79636e65
 8001a68:	25203d20 	.word	0x25203d20
 8001a6c:	00000a64 	.word	0x00000a64
 8001a70:	4b4c4348 	.word	0x4b4c4348
 8001a74:	6572465f 	.word	0x6572465f
 8001a78:	6e657571 	.word	0x6e657571
 8001a7c:	3d207963 	.word	0x3d207963
 8001a80:	0a642520 	.word	0x0a642520
 8001a84:	00000000 	.word	0x00000000
 8001a88:	4b4c4350 	.word	0x4b4c4350
 8001a8c:	72465f31 	.word	0x72465f31
 8001a90:	65757165 	.word	0x65757165
 8001a94:	2079636e 	.word	0x2079636e
 8001a98:	6425203d 	.word	0x6425203d
 8001a9c:	0000000a 	.word	0x0000000a
 8001aa0:	4b4c4350 	.word	0x4b4c4350
 8001aa4:	72465f32 	.word	0x72465f32
 8001aa8:	65757165 	.word	0x65757165
 8001aac:	2079636e 	.word	0x2079636e
 8001ab0:	6425203d 	.word	0x6425203d
 8001ab4:	0000000a 	.word	0x0000000a
 8001ab8:	43434441 	.word	0x43434441
 8001abc:	465f4b4c 	.word	0x465f4b4c
 8001ac0:	75716572 	.word	0x75716572
 8001ac4:	79636e65 	.word	0x79636e65
 8001ac8:	25203d20 	.word	0x25203d20
 8001acc:	00000a64 	.word	0x00000a64
